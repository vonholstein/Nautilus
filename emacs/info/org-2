This is ../../info/org, produced by makeinfo version 4.11 from org.texi.

This manual is for Org (version 6.21b).

   Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009 Free Software
Foundation

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and
     modify this GNU manual.  Buying copies from the FSF supports it in
     developing GNU and promoting software freedom."

     This document is part of a collection distributed under the GNU
     Free Documentation License.  If you want to distribute this
     document separately from the collection, you can do so by adding a
     copy of the license to the document, as described in section 6 of
     the license.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Org Mode: (org).      Outline-based notes management and organizer
END-INFO-DIR-ENTRY


File: org,  Node: Comment lines,  Prev: Horizontal rules,  Up: Markup rules

Comment lines
-------------

Lines starting with `#' in column zero are treated as comments and will
never be exported.  Also entire subtrees starting with the word
`COMMENT' will never be exported.  Finally, regions surrounded by
`#+BEGIN_COMMENT' ... `#+END_COMMENT' will not be exported.

`C-c ;'
     Toggle the COMMENT keyword at the beginning of an entry.


File: org,  Node: Selective export,  Next: Export options,  Prev: Markup rules,  Up: Exporting

12.2 Selective export
=====================

You may use tags to select the parts of a document that should be
exported, or to exclude parts from export.  This behavior is governed
by two variables: `org-export-select-tags' and
`org-export-exclude-tags'.

   Org first checks if any of the _select_ tags is present in the
buffer.  If yes, all trees that do not carry one of these tags will be
excluded.  If a selected tree is a subtree, the heading hierarchy above
it will also be selected for export, but not the text below those
headings.

If none of the select tags is found, the whole buffer will be selected
for export.

Finally, all subtrees that are marked by any of the _exclude_ tags will
be removed from the export buffer.


File: org,  Node: Export options,  Next: The export dispatcher,  Prev: Selective export,  Up: Exporting

12.3 Export options
===================

The exporter recognizes special lines in the buffer which provide
additional information.  These lines may be put anywhere in the file.
The whole set of lines can be inserted into the buffer with `C-c C-e
t'.  For individual lines, a good way to make sure the keyword is
correct is to type `#+' and then use `M-<TAB>' completion (*note
Completion::).

`C-c C-e t'
     Insert template with export options, see example below.

     #+TITLE:     the title to be shown (default is the buffer name)
     #+AUTHOR:    the author (default taken from `user-full-name')
     #+DATE:      A date, fixed, of a format string for `format-time-string'
     #+EMAIL:     his/her email address (default from `user-mail-address')
     #+LANGUAGE:  language for HTML, e.g. `en' (`org-export-default-language')
     #+TEXT:      Some descriptive text to be inserted at the beginning.
     #+TEXT:      Several lines may be given.
     #+OPTIONS:   H:2 num:t toc:t \n:nil @:t ::t |:t ^:t f:t TeX:t ...
     #+LINK_UP:   the ``up'' link of an exported page
     #+LINK_HOME: the ``home'' link of an exported page
     #+EXPORT_SELECT_TAGS:   Tags that select a tree for export
     #+EXPORT_EXCLUDE_TAGS:  Tags that exclude a tree from export

The OPTIONS line is a compact(1) form to specify export settings.  Here
you can: 
     H:         set the number of headline levels for export
     num:       turn on/off section-numbers
     toc:       turn on/off table of contents, or set level limit (integer)
     \n:        turn on/off line-break-preservation
     @:         turn on/off quoted HTML tags
     ::         turn on/off fixed-width sections
     |:         turn on/off tables
     ^:         turn on/off TeX-like syntax for sub- and superscripts.  If
                you write "^:{}", `a_{b}' will be interpreted, but
                the simple `a_b' will be left as it is.
     -:         turn on/off conversion of special strings.
     f:         turn on/off footnotes like this[1].
     todo:      turn on/off inclusion of TODO keywords into exported text
     pri:       turn on/off priority cookies
     tags:      turn on/off inclusion of tags, may also be `not-in-toc'
     <:         turn on/off inclusion of any time/date stamps like DEADLINES
     *:         turn on/off emphasized text (bold, italic, underlined)
     TeX:       turn on/off simple TeX macros in plain text
     LaTeX:     turn on/off LaTeX fragments
     skip:      turn on/off skipping the text before the first heading
     author:    turn on/off inclusion of author name/email into exported file
     creator:   turn on/off inclusion of creator info into exported file
     timestamp: turn on/off inclusion creation time into exported file
     d:         turn on/off inclusion of drawers

   These options take effect in both the HTML and LaTeX export, except
for `TeX' and `LaTeX', which are respectively `t' and `nil' for the
LaTeX export.

   When exporting only a single subtree by selecting it with `C-c @'
before calling an export command, the subtree can overrule some of the
file's export settings with properties `EXPORT_FILE_NAME',
`EXPORT_TITLE', `EXPORT_TEXT', and `EXPORT_OPTIONS'.

   ---------- Footnotes ----------

   (1) If you want to configure many options this way, you can use
several OPTIONS lines.


File: org,  Node: The export dispatcher,  Next: ASCII export,  Prev: Export options,  Up: Exporting

12.4 The export dispatcher
==========================

All export commands can be reached using the export dispatcher, which
is a prefix key that prompts for an additional key specifying the
command.  Normally the entire file is exported, but if there is an
active region that contains one outline tree, the first heading is used
as document title and the subtrees are exported.

`C-c C-e'
     Dispatcher for export and publishing commands.  Displays a
     help-window listing the additional key(s) needed to launch an
     export or publishing command.  The prefix arg is passed through to
     the exporter.  A double prefix `C-u C-u' causes most commands to
     be executed in the background, in a separate emacs process(1).  

`C-c C-e v'
     Like `C-c C-e', but only export the text that is currently visible
     (i.e. not hidden by outline visibility).  

`C-u C-u C-c C-e'
     Call an the exporter, but reverse the setting of
     `org-export-run-in-background', i.e. request background processing
     if not set, or force processing in the current Emacs process if st.

   ---------- Footnotes ----------

   (1) To make this behavior the default, customize the variable
`org-export-run-in-background'.


File: org,  Node: ASCII export,  Next: HTML export,  Prev: The export dispatcher,  Up: Exporting

12.5 ASCII export
=================

ASCII export produces a simple and very readable version of an Org mode
file.

`C-c C-e a'
     Export as ASCII file.  For an org file `myfile.org', the ASCII file
     will be `myfile.txt'.  The file will be overwritten without
     warning.  If there is an active region(1), only the region will be
     exported. If the selected region is a single tree(2), the tree
     head will become the document title.  If the tree head entry has
     or inherits an `EXPORT_FILE_NAME' property, that name will be used
     for the export.  

`C-c C-e v a'
     Export only the visible part of the document.

   In the exported version, the first 3 outline levels will become
headlines, defining a general document structure.  Additional levels
will be exported as itemized lists.  If you want that transition to
occur at a different level, specify it with a prefix argument.  For
example,

     C-1 C-c C-e a

creates only top level headlines and does the rest as items.  When
headlines are converted to items, the indentation of the text following
the headline is changed to fit nicely under the item.  This is done with
the assumption that the first body line indicates the base indentation
of the body text.  Any indentation larger than this is adjusted to
preserve the layout relative to the first line.  Should there be lines
with less indentation than the first, these are left alone.

   ---------- Footnotes ----------

   (1) this requires `transient-mark-mode' to be turned on

   (2) To select the current subtree, use `C-c @'.


File: org,  Node: HTML export,  Next: LaTeX and PDF export,  Prev: ASCII export,  Up: Exporting

12.6 HTML export
================

Org mode contains an HTML (XHTML 1.0 strict) exporter with extensive
HTML formatting, in ways similar to John Gruber's _markdown_ language,
but with additional support for tables.

* Menu:

* HTML Export commands::        How to invoke HTML export
* Quoting HTML tags::           Using direct HTML in Org mode
* Links::                       Transformation of links for HTML
* Images in HTML export::       How to insert figures into HTML output
* Text areas in HTML export::   An alternative way to show an example
* CSS support::                 Changing the appearance of the output
* Javascript support::          Info and Folding in a web browser


File: org,  Node: HTML Export commands,  Next: Quoting HTML tags,  Prev: HTML export,  Up: HTML export

12.6.1 HTML export commands
---------------------------

`C-c C-e h'
     Export as HTML file `myfile.html'.  For an org file `myfile.org',
     the ASCII file will be `myfile.html'.  The file will be overwritten
     without warning.  If there is an active region(1), only the region
     will be exported. If the selected region is a single tree(2), the
     tree head will become the document title.  If the tree head entry
     has, or inherits, an `EXPORT_FILE_NAME' property, that name will
     be used for the export.  

`C-c C-e b'
     Export as HTML file and immediately open it with a browser.  

`C-c C-e H'
     Export to a temporary buffer, do not create a file.  

`C-c C-e R'
     Export the active region to a temporary buffer.  With a prefix
     argument, do not produce the file header and footer, but just the
     plain HTML section for the region.  This is good for cut-and-paste
     operations.  

`C-c C-e v h'

`C-c C-e v b'

`C-c C-e v H'

`C-c C-e v R'
     Export only the visible part of the document.

`M-x org-export-region-as-html'
     Convert the region to HTML under the assumption that it was Org
     mode syntax before.  This is a global command that can be invoked
     in any buffer.

`M-x org-replace-region-by-HTML'
     Replace the active region (assumed to be in Org mode syntax) by
     HTML code.

   In the exported version, the first 3 outline levels will become
headlines, defining a general document structure.  Additional levels
will be exported as itemized lists.  If you want that transition to
occur at a different level, specify it with a numeric prefix argument.
For example,

     C-2 C-c C-e b

creates two levels of headings and does the rest as items.

   ---------- Footnotes ----------

   (1) this requires `transient-mark-mode' to be turned on

   (2) To select the current subtree, use `C-c @'.


File: org,  Node: Quoting HTML tags,  Next: Links,  Prev: HTML Export commands,  Up: HTML export

12.6.2 Quoting HTML tags
------------------------

Plain `<' and `>' are always transformed to `&lt;' and `&gt;' in HTML
export.  If you want to include simple HTML tags which should be
interpreted as such, mark them with `@' as in `@<b>bold text@</b>'.
Note that this really works only for simple tags.  For more extensive
HTML that should be copied verbatim to the exported file use either

     #+HTML: Literal HTML code for export

or 

     #+BEGIN_HTML
     All lines between these markers are exported literally
     #+END_HTML


File: org,  Node: Links,  Next: Images in HTML export,  Prev: Quoting HTML tags,  Up: HTML export

12.6.3 Links
------------

Internal links (*note Internal links::) will continue to work in HTML.
This does include automatic links created by radio targets (*note Radio
targets::).  Links to external files will still work if the target file
is on the same relative path as the published Org file.  Links to other
`.org' files will be translated into HTML links under the assumption
that an HTML version also exists of the linked file, at the same
relative path.  `id:' links can then be used to jump to specific
entries across files.  For information related to linking files while
publishing them to a publishing directory see *note Publishing links::.

   If you want to specify attributes for links, you can do so using a
special `#+ATTR_HTML' line to define attributes that will be added to
the `<a>' or `<img>' tags.  Here is an example that sets `alt' and
`title' attributes for an inlined image:

     #+ATTR_HTML: alt="This is image A" title="Image with no action"
     [[./img/a.jpg]]


File: org,  Node: Images in HTML export,  Next: Text areas in HTML export,  Prev: Links,  Up: HTML export

12.6.4 Images
-------------

HTML export can inline images given as links in the Org file, and it
can make an image the clickable part of a link.  By default(1), images
are inlined if a link does not have a description.  So
`[[file:myimg.jpg]]' will be inlined, while `[[file:myimg.jpg][the
image]]' will just produce a link `the image' that points to the image.
If the description part itself is a `file:' link or a `http:' URL
pointing to an image, this image will be inlined and activated so that
clicking on the image will activate the link.  For example, to include
a thumbnail that will link to a high resolution version of the image,
you could use:

     [[file:highres.jpg][file:thumb.jpg]]

and you could use `http' addresses just as well.

   ---------- Footnotes ----------

   (1) but see the variable `org-export-html-inline-images'


File: org,  Node: Text areas in HTML export,  Next: CSS support,  Prev: Images in HTML export,  Up: HTML export

12.6.5 Text areas
-----------------

An alternative way to publish literal code examples in HTML is to use
text areas, where the example can even be edited before pasting it into
an application.  It is triggered by a `-t' switch at an `example' or
`src' block.  Using this switch disables any options for syntax and
label highlighting, and line numbering, which may be present.  You may
also use `-h' and `-w' switches to specify the height and width of the
text area, which default to the number of lines in the example, and 80,
respectively.  For example

     #+BEGIN_EXAMPLE -t -w 40
     (defun org-xor (a b)
        "Exclusive or."
        (if a (not b) b))
     #+END_EXAMPLE


File: org,  Node: CSS support,  Next: Javascript support,  Prev: Text areas in HTML export,  Up: HTML export

12.6.6 CSS support
------------------

You can also give style information for the exported file.  The HTML
exporter assigns the following special CSS classes to appropriate parts
of the document - your style specifications may change these, in
addition to any of the standard classes like for headlines, tables etc.
     .todo              TODO keywords
     .done              the DONE keyword
     .timestamp         time stamp
     .timestamp-kwd     keyword associated with a time stamp, like SCHEDULED
     .tag               tag in a headline
     .target            target for links
     div.figure         how to format an inlined image
     .linenr            the line number in a code example
     .code-highlighted  for highlighting referenced code lines

   Each exported files contains a compact default style that defines
these classes in a basic way(1).  You may overwrite these settings, or
add to them by using the variables `org-export-html-style' (for
Org-wide settings) and `org-export-html-style-extra' (for more granular
settings, like file-local settings).  To set the latter variable
individually for each file, you can use

     #+STYLE: <link rel="stylesheet" type="text/css" href="stylesheet.css" />

For longer style definitions, you can use several such lines.  You
could also directly write a `<style>' `</style>' section in this way,
without referring to an external file.

   ---------- Footnotes ----------

   (1) This style is defined in the constant
`org-export-html-style-default', which you should not modify.  To turn
inclusion of these defaults off, customize
`org-export-html-style-include-default'


File: org,  Node: Javascript support,  Prev: CSS support,  Up: HTML export

12.6.7 Javascript supported display of web pages
------------------------------------------------

_Sebastian Rose_ has written a JavaScript program especially designed to
enhance the web viewing experience of HTML files created with Org.  This
program allows you to view large files in two different ways.  The
first one is an _Info_-like mode where each section is displayed
separately and navigation can be done with the `n' and `p' keys (and
some other keys as well, press `?' for an overview of the available
keys).  The second view type is a _folding_ view much like Org provides
inside Emacs.  The script is available at
`http://orgmode.org/org-info.js' and you can find the documentation for
it at `http://orgmode.org/worg/code/org-info-js/'.  We are serving the
script from our site, but if you use it a lot, you might not want to be
dependent on `orgmode.org' and prefer to install a local copy on your
own web server.

   To use the script, you need to make sure that the `org-jsinfo.el'
module gets loaded.  It should be loaded by default, but you can try
`M-x customize-variable <RET> org-modules <RET>' to convince yourself
that this is indeed the case.  All it then takes to make use of the
program is adding a single line to the Org file:

     #+INFOJS_OPT: view:info toc:nil

If this line is found, the HTML header will automatically contain the
code needed to invoke the script.  Using the line above, you can set
the following viewing options:

     path:    The path to the script.  The default is to grab the script from
              `http://orgmode.org/org-info.js', but you might want to have
              a local copy and use a path like `../scripts/org-info.js'.
     view:    Initial view when website is first shown.  Possible values are:
              info      Info-like interface with one section per page.
              overview  Folding interface, initially showing only top-level.
              content   Folding interface, starting with all headlines visible.
              showall   Folding interface, all headlines and text visible.
     sdepth:  Maximum headline level that will still become an independent
              section for info and folding modes.  The default is taken from
              `org-headline-levels' (= the `H' switch in `#+OPTIONS').
              If this is smaller than in `org-headline-levels', each
              info/folding section can still contain children headlines.
     toc:     Should the table of content _initially_ be visible?
              Even when `nil', you can always get to the toc with `i'.
     tdepth:  The depth of the table of contents.  The defaults are taken from
              the variables `org-headline-levels' and `org-export-with-toc'.
     ftoc:    Does the css of the page specify a fixed position for the toc?
              If yes, the toc will never be displayed as a section.
     ltoc:    Should there be short contents (children) in each section?
              Make this `above' it the section should be above initial text.
     mouse:   Headings are highlighted when the mouse is over them.  Should be
              `underline' (default) or a background color like `#cccccc'.
     buttons: Should view-toggle buttons be everywhere?  When `nil' (the
              default), only one such button will be present.

   You can choose default values for these options by customizing the
variable `org-infojs-options'.  If you always want to apply the script
to your pages, configure the variable `org-export-html-use-infojs'.


File: org,  Node: LaTeX and PDF export,  Next: XOXO export,  Prev: HTML export,  Up: Exporting

12.7 LaTeX and PDF export
=========================

Org mode contains a LaTeX exporter written by Bastien Guerry.  With
further processing, this backend is also used to produce PDF output.
Since the LaTeX output uses `hyperref' to implement links and cross
references, the PDF output file will be fully linked.

* Menu:

* LaTeX/PDF export commands::   Which key invokes which commands
* Quoting LaTeX code::          Incorporating literal LaTeX code
* Sectioning structure::        Changing sectioning in LaTeX output
* Tables in LaTeX export::      Options for exporting tables to LaTeX
* Images in LaTeX export::      How to insert figures into LaTeX output


File: org,  Node: LaTeX/PDF export commands,  Next: Quoting LaTeX code,  Prev: LaTeX and PDF export,  Up: LaTeX and PDF export

12.7.1 LaTeX export commands
----------------------------

`C-c C-e l'
     Export as LaTeX file `myfile.tex'.  For an org file `myfile.org',
     the ASCII file will be `myfile.tex'.  The file will be overwritten
     without warning.  If there is an active region(1), only the region
     will be exported. If the selected region is a single tree(2), the
     tree head will become the document title.  If the tree head entry
     has or inherits an `EXPORT_FILE_NAME' property, that name will be
     used for the export.  

`C-c C-e L'
     Export to a temporary buffer, do not create a file.  

`C-c C-e v l'

`C-c C-e v L'
     Export only the visible part of the document.

`M-x org-export-region-as-latex'
     Convert the region to LaTeX under the assumption that it was Org
     mode syntax before.  This is a global command that can be invoked
     in any buffer.

`M-x org-replace-region-by-latex'
     Replace the active region (assumed to be in Org mode syntax) by
     LaTeX code.  

`C-c C-e p'
     Export as LaTeX and then process to PDF.  

`C-c C-e d'
     Export as LaTeX and then process to PDF, then open the resulting
     PDF file.

   In the exported version, the first 3 outline levels will become
headlines, defining a general document structure.  Additional levels
will be exported as description lists.  The exporter can ignore them or
convert them to a custom string depending on `org-latex-low-levels'.

   If you want that transition to occur at a different level, specify it
with a numeric prefix argument. For example,

     C-2 C-c C-e l

creates two levels of headings and does the rest as items.

   ---------- Footnotes ----------

   (1) this requires `transient-mark-mode' to be turned on

   (2) To select the current subtree, use `C-c @'.


File: org,  Node: Quoting LaTeX code,  Next: Sectioning structure,  Prev: LaTeX/PDF export commands,  Up: LaTeX and PDF export

12.7.2 Quoting LaTeX code
-------------------------

Embedded LaTeX as described in *note Embedded LaTeX:: will be correctly
inserted into the LaTeX file.  This includes simple macros like
`\ref{LABEL}' to create a cross reference to a figure.  Furthermore,
you can add special code that should only be present in LaTeX export
with the following constructs:

     #+LaTeX: Literal LaTeX code for export

or 

     #+BEGIN_LaTeX
     All lines between these markers are exported literally
     #+END_LaTeX


File: org,  Node: Sectioning structure,  Next: Tables in LaTeX export,  Prev: Quoting LaTeX code,  Up: LaTeX and PDF export

12.7.3 Sectioning structure
---------------------------

By default, the LaTeX output uses the class `article'.

   You can change this globally by setting a different value for
`org-export-latex-default-class' or locally by adding an option like
`#+LaTeX_CLASS: myclass' in your file, or with a `:LaTeX_CLASS:'
property that applies when exporting a region containing only this
(sub)tree.  The class should be listed in `org-export-latex-classes',
where you can also define the sectioning structure for each class, as
well as defining additional classes.


File: org,  Node: Tables in LaTeX export,  Next: Images in LaTeX export,  Prev: Sectioning structure,  Up: LaTeX and PDF export

12.7.4 Tables in LaTeX export
-----------------------------

For LaTeX export of a table, you can specify a label and a caption
(*note Markup rules::).  You can also use the `ATTR_LaTeX' line to
request a longtable environment for the table, so that it may span
several pages:

     #+CAPTION: A long table
     #+LABEL: tbl:long
     #+ATTR_LaTeX: longtable
     | ..... | ..... |
     | ..... | ..... |


File: org,  Node: Images in LaTeX export,  Prev: Tables in LaTeX export,  Up: LaTeX and PDF export

12.7.5 Images in LaTeX export
-----------------------------

Images that are linked to without a description part in the link, like
`[[file:img.jpg]]' or `[[./img.jpg]]' will be inserted into the PDF
output files resulting from LaTeX output.  Org will use an
`\includegraphics' macro to insert the image.  If you have specified a
caption and/or a label as described in *note Markup rules::, the figure
will be wrapped into a `figure' environment and thus become a floating
element.  Finally, you can use an `#+ATTR_LaTeX:' line to specify the
options that can be used in the optional argument of the
`\includegraphics' macro.

     #+CAPTION:    The black-body emission of the disk around HR 4049
     #+LABEL:      fig:SED-HR4049
     #+ATTR_LaTeX: width=5cm,angle=90
     [[./img/sed-hr4049.pdf]]

   If you need references to a label created in this way, write
`\ref{fig:SED-HR4049}' just like in LaTeX.  The default settings will
recognize files types that can be included as images during processing
by pdflatex (`png', `jpg', and `pdf' files).  If you process your files
in a different way, you may need to customize the variable
`org-export-latex-inline-image-extensions'.


File: org,  Node: XOXO export,  Next: iCalendar export,  Prev: LaTeX and PDF export,  Up: Exporting

12.8 XOXO export
================

Org mode contains an exporter that produces XOXO-style output.
Currently, this exporter only handles the general outline structure and
does not interpret any additional Org mode features.

`C-c C-e x'
     Export as XOXO file `myfile.html'.  

`C-c C-e v x'
     Export only the visible part of the document.


File: org,  Node: iCalendar export,  Prev: XOXO export,  Up: Exporting

12.9 iCalendar export
=====================

Some people like to use Org mode for keeping track of projects, but
still prefer a standard calendar application for anniversaries and
appointments.  In this case it can be useful to have deadlines and
other time-stamped items in Org files show up in the calendar
application.  Org mode can export calendar information in the standard
iCalendar format.  If you also want to have TODO entries included in
the export, configure the variable `org-icalendar-include-todo'.
iCalendar export will export plain time stamps as VEVENT, and TODO
items as VTODO.  It will also create events from deadlines that are in
non-TODO items.  Deadlines and scheduling dates in TODO items will be
used to set the start and due dates for the todo entry(1).  As
categories, it will use the tags locally defined in the heading, and
the file/tree category(2).

   The iCalendar standard requires each entry to have a globally unique
identifier (UID).  Org creates these identifiers during export.  If you
set the variable `org-icalendar-store-UID', the UID will be stored in
the `:ID:' property of the entry and re-used next time you report this
entry.  Since a single entry can give rise to multiple iCalendar
entries (as a timestamp, a deadline, a scheduled item, and as a TODO
item), Org adds prefixes to the UID, depending on what triggered the
inclusion of the entry.  In this way the UID remains unique, but a
synchronization program can still figure out from which entry all the
different instances originate.

`C-c C-e i'
     Create iCalendar entries for the current file and store them in
     the same directory, using a file extension `.ics'.  

`C-c C-e I'
     Like `C-c C-e i', but do this for all files in `org-agenda-files'.
     For each of these files, a separate iCalendar file will be written.  

`C-c C-e c'
     Create a single large iCalendar file from all files in
     `org-agenda-files' and write it to the file given by
     `org-combined-agenda-icalendar-file'.

   The export will honor SUMMARY, DESCRIPTION and LOCATION(3)
properties if the selected entries have them.  If not, the summary will
be derived from the headline, and the description from the body
(limited to `org-icalendar-include-body' characters).

   How this calendar is best read and updated, that depends on the
application you are using.  The FAQ covers this issue.

   ---------- Footnotes ----------

   (1) See the variables `org-icalendar-use-deadline' and
`org-icalendar-use-scheduled'.

   (2) To add inherited tags or the TODO state, configure the variable
`org-icalendar-categories'.

   (3) The LOCATION property can be inherited from higher in the
hierarchy if you configure `org-use-property-inheritance' accordingly.


File: org,  Node: Publishing,  Next: Miscellaneous,  Prev: Exporting,  Up: Top

13 Publishing
*************

Org includes(1) a publishing management system that allows you to
configure automatic HTML conversion of _projects_ composed of
interlinked org files.  This system is called _org-publish_.  You can
also configure org-publish to automatically upload your exported HTML
pages and related attachments, such as images and source code files, to
a web server. Org-publish turns Org into a web-site authoring tool.

   You can also use Org-publish to convert files into LaTeX, or even
combine HTML and LaTeX conversion so that files are available in both
formats on the server(2).

   Org-publish has been contributed to Org by David O'Toole.

* Menu:

* Configuration::               Defining projects
* Sample configuration::        Example projects
* Triggering publication::      Publication commands

   ---------- Footnotes ----------

   (1) `org-publish.el' is not distributed with Emacs 21, if you are
still using Emacs 21, you need you need to download this file
separately.

   (2) Since LaTeX files on a server are not that helpful, you surely
want to perform further conversion on them - e.g. convert them to `PDF'
format.


File: org,  Node: Configuration,  Next: Sample configuration,  Prev: Publishing,  Up: Publishing

13.1 Configuration
==================

Publishing needs significant configuration to specify files, destination
and many other properties of a project.

* Menu:

* Project alist::               The central configuration variable
* Sources and destinations::    From here to there
* Selecting files::             What files are part of the project?
* Publishing action::           Setting the function doing the publishing
* Publishing options::          Tweaking HTML export
* Publishing links::            Which links keep working after publishing?
* Project page index::          Publishing a list of project files


File: org,  Node: Project alist,  Next: Sources and destinations,  Prev: Configuration,  Up: Configuration

13.1.1 The variable `org-publish-project-alist'
-----------------------------------------------

Org-publish is configured almost entirely through setting the value of
one variable, called `org-publish-project-alist'.  Each element of the
list configures one project, and may be in one of the two following
forms:

     ("project-name" :property value :property value ...)

     or

     ("project-name" :components ("project-name" "project-name" ...))

   In both cases, projects are configured by specifying property values.
A project defines the set of files that will be published, as well as
the publishing configuration to use when publishing those files.  When
a project takes the second form listed above, the individual members of
the "components" property are taken to be components of the project,
which group together files requiring different publishing options. When
you publish such a "meta-project" all the components will also publish.
The `:components' are published in the sequence provided.


File: org,  Node: Sources and destinations,  Next: Selecting files,  Prev: Project alist,  Up: Configuration

13.1.2 Sources and destinations for files
-----------------------------------------

Most properties are optional, but some should always be set. In
particular, org-publish needs to know where to look for source files,
and where to put published files.

`:base-directory'      Directory containing publishing source files
`:publishing-directory'Directory (possibly remote) where output files
                       will be published.
`:preparation-function'Function called before starting the publishing
                       process, for example to run `make' for updating
                       files to be published.
`:completion-function' Function called after finishing the publishing
                       process, for example to change permissions of the
                       resulting files.


File: org,  Node: Selecting files,  Next: Publishing action,  Prev: Sources and destinations,  Up: Configuration

13.1.3 Selecting files
----------------------

By default, all files with extension `.org' in the base directory are
considered part of the project.  This can be modified by setting the
properties
`:base-extension'  Extension (without the dot!) of source files.  This
                   actually is a regular expression.
`:exclude'         Regular expression to match file names that should
                   not be published, even though they have been selected
                   on the basis of their extension.
`:include'         List of files to be included regardless of
                   `:base-extension' and `:exclude'.


File: org,  Node: Publishing action,  Next: Publishing options,  Prev: Selecting files,  Up: Configuration

13.1.4 Publishing action
------------------------

Publishing means that a file is copied to the destination directory and
possibly transformed in the process.  The default transformation is to
export Org files as HTML files, and this is done by the function
`org-publish-org-to-html' which calls the HTML exporter (*note HTML
export::). But you also can publish your files in LaTeX by using the
function `org-publish-org-to-latex' instead, or as PDF files using
`org-publish-org-to-pdf'.  Other files like images only need to be
copied to the publishing destination. For non-Org files, you need to
provide your own publishing function:

`:publishing-function' Function executing the publication of a file.
                       This may also be a list of functions, which will
                       all be called in turn.

   The function must accept two arguments: a property list containing at
least a `:publishing-directory' property, and the name of the file to
be published.  It should take the specified file, make the necessary
transformation (if any) and place the result into the destination
folder.  You can write your own publishing function, but `org-publish'
provides one for attachments (files that only need to be copied):
`org-publish-attachment'.


File: org,  Node: Publishing options,  Next: Publishing links,  Prev: Publishing action,  Up: Configuration

13.1.5 Options for the HTML/LaTeX exporters
-------------------------------------------

The property list can be used to set many export options for the HTML
and LaTeX exporters.  In most cases, these properties correspond to user
variables in Org.  The table below lists these properties along with
the variable they belong to.  See the documentation string for the
respective variable for details.

`:link-up'              `org-export-html-link-up'
`:link-home'            `org-export-html-link-home'
`:language'             `org-export-default-language'
`:customtime'           `org-display-custom-times'
`:headline-levels'      `org-export-headline-levels'
`:section-numbers'      `org-export-with-section-numbers'
`:section-number-format'`org-export-section-number-format'
`:table-of-contents'    `org-export-with-toc'
`:preserve-breaks'      `org-export-preserve-breaks'
`:archived-trees'       `org-export-with-archived-trees'
`:emphasize'            `org-export-with-emphasize'
`:sub-superscript'      `org-export-with-sub-superscripts'
`:special-strings'      `org-export-with-special-strings'
`:footnotes'            `org-export-with-footnotes'
`:drawers'              `org-export-with-drawers'
`:tags'                 `org-export-with-tags'
`:todo-keywords'        `org-export-with-todo-keywords'
`:priority'             `org-export-with-priority'
`:TeX-macros'           `org-export-with-TeX-macros'
`:LaTeX-fragments'      `org-export-with-LaTeX-fragments'
`:skip-before-1st-heading'`org-export-skip-text-before-1st-heading'
`:fixed-width'          `org-export-with-fixed-width'
`:timestamps'           `org-export-with-timestamps'
`:author-info'          `org-export-author-info'
`:creator-info'         `org-export-creator-info'
`:tables'               `org-export-with-tables'
`:table-auto-headline'  `org-export-highlight-first-table-line'
`:style-include-default'`org-export-html-style-include-default'
`:style'                `org-export-html-style'
`:style-extra'          `org-export-html-style-extra'
`:convert-org-links'    `org-export-html-link-org-files-as-html'
`:inline-images'        `org-export-html-inline-images'
`:html-extension'       `org-export-html-extension'
`:html-table-tag'       `org-export-html-table-tag'
`:expand-quoted-html'   `org-export-html-expand'
`:timestamp'            `org-export-html-with-timestamp'
`:publishing-directory' `org-export-publishing-directory'
`:preamble'             `org-export-html-preamble'
`:postamble'            `org-export-html-postamble'
`:auto-preamble'        `org-export-html-auto-preamble'
`:auto-postamble'       `org-export-html-auto-postamble'
`:author'               `user-full-name'
`:email'                `user-mail-address'
`:select-tags'          `org-export-select-tags'
`:exclude-tags'         `org-export-exclude-tags'

   If you use several email addresses, separate them by a semi-column.

   Most of the `org-export-with-*' variables have the same effect in
both HTML and LaTeX exporters, except for `:TeX-macros' and
`:LaTeX-fragments', respectively `nil' and `t' in the LaTeX export.

   When a property is given a value in `org-publish-project-alist', its
setting overrides the value of the corresponding user variable (if any)
during publishing.  Options set within a file (*note Export options::),
however, override everything.


File: org,  Node: Publishing links,  Next: Project page index,  Prev: Publishing options,  Up: Configuration

13.1.6 Links between published files
------------------------------------

To create a link from one Org file to another, you would use something
like `[[file:foo.org][The foo]]' or simply `file:foo.org.' (*note
Hyperlinks::).  Upon publishing this link becomes a link to `foo.html'.
In this way, you can interlink the pages of your "org web" project and
the links will work as expected when you publish them to HTML.

   You may also link to related files, such as images. Provided you are
careful with relative pathnames, and provided you have also configured
`org-publish' to upload the related files, these links will work too.
See *note Complex example:: for an example of this usage.

   Sometime an Org file to be published may contain links that are only
valid in your production environment, but not in the publishing
location.  In this case, use the property

`:link-validation-function'   Function to validate links

to define a function for checking link validity.  This function must
accept two arguments, the file name and a directory relative to which
the file name is interpreted in the production environment.  If this
function returns `nil', then the HTML generator will only insert a
description into the HTML file, but no link.  One option for this
function is `org-publish-validate-link' which checks if the given file
is part of any project in `org-publish-project-alist'.


File: org,  Node: Project page index,  Prev: Publishing links,  Up: Configuration

13.1.7 Project page index
-------------------------

The following properties may be used to control publishing of an index
of files or summary page for a given project.

`:auto-index'      When non-nil, publish an index during
                   org-publish-current-project or org-publish-all.
`:index-filename'  Filename for output of index. Defaults to `index.org'
                   (which becomes `index.html').
`:index-title'     Title of index page. Defaults to name of file.
`:index-function'  Plug-in function to use for generation of index.
                   Defaults to `org-publish-org-index', which generates
                   a plain list of links to all files in the project.


File: org,  Node: Sample configuration,  Next: Triggering publication,  Prev: Configuration,  Up: Publishing

13.2 Sample configuration
=========================

Below we provide two example configurations.  The first one is a simple
project publishing only a set of Org files.  The second example is more
complex, with a multi-component project.

* Menu:

* Simple example::              One-component publishing
* Complex example::             A multi-component publishing example


File: org,  Node: Simple example,  Next: Complex example,  Prev: Sample configuration,  Up: Sample configuration

13.2.1 Example: simple publishing configuration
-----------------------------------------------

This example publishes a set of Org files to the `public_html'
directory on the local machine.

     (setq org-publish-project-alist
           '(("org"
              :base-directory "~/org/"
              :publishing-directory "~/public_html"
              :section-numbers nil
              :table-of-contents nil
              :style "<link rel=\"stylesheet\"
                     href=\"../other/mystyle.css\"
                     type=\"text/css\">")))


File: org,  Node: Complex example,  Prev: Simple example,  Up: Sample configuration

13.2.2 Example: complex publishing configuration
------------------------------------------------

This more complicated example publishes an entire website, including
org files converted to HTML, image files, emacs lisp source code, and
style sheets. The publishing-directory is remote and private files are
excluded.

   To ensure that links are preserved, care should be taken to replicate
your directory structure on the web server, and to use relative file
paths. For example, if your org files are kept in `~/org' and your
publishable images in `~/images', you'd link to an image with
     file:../images/myimage.png
   On the web server, the relative path to the image should be the
same. You can accomplish this by setting up an "images" folder in the
right place on the web server, and publishing images to it.

     (setq org-publish-project-alist
           '(("orgfiles"
               :base-directory "~/org/"
               :base-extension "org"
               :publishing-directory "/ssh:user@host:~/html/notebook/"
               :publishing-function org-publish-org-to-html
               :exclude "PrivatePage.org"   ;; regexp
               :headline-levels 3
               :section-numbers nil
               :table-of-contents nil
               :style "<link rel=\"stylesheet\"
                       href=\"../other/mystyle.css\" type=\"text/css\">"
               :auto-preamble t
               :auto-postamble nil)

              ("images"
               :base-directory "~/images/"
               :base-extension "jpg\\|gif\\|png"
               :publishing-directory "/ssh:user@host:~/html/images/"
               :publishing-function org-publish-attachment)

              ("other"
               :base-directory "~/other/"
               :base-extension "css\\|el"
               :publishing-directory "/ssh:user@host:~/html/other/"
               :publishing-function org-publish-attachment)
              ("website" :components ("orgfiles" "images" "other"))))


File: org,  Node: Triggering publication,  Prev: Sample configuration,  Up: Publishing

13.3 Triggering publication
===========================

Once org-publish is properly configured, you can publish with the
following functions:

`C-c C-e C'
     Prompt for a specific project and publish all files that belong to
     it.

`C-c C-e P'
     Publish the project containing the current file.

`C-c C-e F'
     Publish only the current file.

`C-c C-e A'
     Publish all projects.

   Org uses timestamps to track when a file has changed. The above
functions normally only publish changed files. You can override this and
force publishing of all files by giving a prefix argument.


File: org,  Node: Miscellaneous,  Next: Extensions,  Prev: Publishing,  Up: Top

14 Miscellaneous
****************

* Menu:

* Completion::                  M-TAB knows what you need
* Customization::               Adapting Org to your taste
* In-buffer settings::          Overview of the #+KEYWORDS
* The very busy C-c C-c key::   When in doubt, press C-c C-c
* Clean view::                  Getting rid of leading stars in the outline
* TTY keys::                    Using Org on a tty
* Interaction::                 Other Emacs packages
* Bugs::                        Things which do not work perfectly


File: org,  Node: Completion,  Next: Customization,  Prev: Miscellaneous,  Up: Miscellaneous

14.1 Completion
===============

Org supports in-buffer completion.  This type of completion does not
make use of the minibuffer.  You simply type a few letters into the
buffer and use the key to complete text right there.

`M-<TAB>'
     Complete word at point
        * At the beginning of a headline, complete TODO keywords.

        * After `\', complete TeX symbols supported by the exporter.

        * After `*', complete headlines in the current buffer so that
          they can be used in search links like `[[*find this
          headline]]'.

        * After `:' in a headline, complete tags.  The list of tags is
          taken from the variable `org-tag-alist' (possibly set through
          the `#+TAGS' in-buffer option, *note Setting tags::), or it
          is created dynamically from all tags used in the current
          buffer.

        * After `:' and not in a headline, complete property keys.  The
          list of keys is constructed dynamically from all keys used in
          the current buffer.

        * After `[', complete link abbreviations (*note Link
          abbreviations::).

        * After `#+', complete the special keywords like `TYP_TODO' or
          `OPTIONS' which set file-specific options for Org mode.  When
          the option keyword is already complete, pressing `M-<TAB>'
          again will insert example settings for this keyword.

        * In the line after `#+STARTUP: ', complete startup keywords,
          i.e. valid keys for this line.

        * Elsewhere, complete dictionary words using Ispell.


File: org,  Node: Customization,  Next: In-buffer settings,  Prev: Completion,  Up: Miscellaneous

14.2 Customization
==================

There are more than 180 variables that can be used to customize Org.
For the sake of compactness of the manual, I am not describing the
variables here.  A structured overview of customization variables is
available with `M-x org-customize'.  Or select `Browse Org Group' from
the `Org->Customization' menu.  Many settings can also be activated on
a per-file basis, by putting special lines into the buffer (*note
In-buffer settings::).


File: org,  Node: In-buffer settings,  Next: The very busy C-c C-c key,  Prev: Customization,  Up: Miscellaneous

14.3 Summary of in-buffer settings
==================================

Org mode uses special lines in the buffer to define settings on a
per-file basis.  These lines start with a `#+' followed by a keyword, a
colon, and then individual words defining a setting.  Several setting
words can be in the same line, but you can also have multiple lines for
the keyword.  While these settings are described throughout the manual,
here is a summary.  After changing any of those lines in the buffer,
press `C-c C-c' with the cursor still in the line to activate the
changes immediately.  Otherwise they become effective only when the
file is visited again in a new Emacs session.

`#+ARCHIVE: %s_done::'
     This line sets the archive location for the agenda file.  It
     applies for all subsequent lines until the next `#+ARCHIVE' line,
     or the end of the file.  The first such line also applies to any
     entries before it.  The corresponding variable is
     `org-archive-location'.

`#+CATEGORY:'
     This line sets the category for the agenda file.  The category
     applies for all subsequent lines until the next `#+CATEGORY' line,
     or the end of the file.  The first such line also applies to any
     entries before it.

`#+COLUMNS: %25ITEM .....'
     Set the default format for columns view.  This format applies when
     columns view is invoked in location where no `COLUMNS' property
     applies.

`#+CONSTANTS: name1=value1 ...'
     Set file-local values for constants to be used in table formulas.
     This line set the local variable
     `org-table-formula-constants-local'.  The global version of this
     variable is `org-table-formula-constants'.

`#+FILETAGS: :tag1:tag2:tag3:'
     Set tags that can be inherited by any entry in the file, including
     the top-level entries.

`#+DRAWERS: NAME1 .....'
     Set the file-local set of drawers.  The corresponding global
     variable is `org-drawers'.

`#+LINK:  linkword replace'
     These lines (several are allowed) specify link abbreviations.
     *Note Link abbreviations::.  The corresponding variable is
     `org-link-abbrev-alist'.

`#+PRIORITIES: highest lowest default'
     This line sets the limits and the default for the priorities.  All
     three must be either letters A-Z or numbers 0-9.  The highest
     priority must have a lower ASCII number that the lowest priority.

`#+PROPERTY: Property_Name Value'
     This line sets a default inheritance value for entries in the
     current buffer, most useful for specifying the allowed values of a
     property.

`#+SETUPFILE: file'
     This line defines a file that holds more in-buffer setup.
     Normally this is entirely ignored.  Only when the buffer is parsed
     for option-setting lines (i.e. when starting Org mode for a file,
     when pressing `C-c C-c' in a settings line, or when exporting),
     then the contents of this file are parsed as if they had been
     included in the buffer.  In particular, the file can be any other
     Org mode file with internal setup.  You can visit the file the
     cursor is in the line with `C-c ''.

`#+STARTUP:'
     This line sets options to be used at startup of Org mode, when an
     Org file is being visited.  The first set of options deals with the
     initial visibility of the outline tree.  The corresponding
     variable for global default settings is `org-startup-folded', with
     a default value `t', which means `overview'.  
          overview   top-level headlines only
          content    all headlines
          showall    no folding at all, show everything
     Then there are options for aligning tables upon visiting a file.
     This is useful in files containing narrowed table columns.  The
     corresponding variable is `org-startup-align-all-tables', with a
     default value `nil'.  
          align      align all tables
          noalign    don't align tables on startup
     Logging closing and reinstating TODO items, and clock intervals
     (variables `org-log-done', `org-log-note-clock-out', and
     `org-log-repeat') can be configured using these options.  
          logdone            record a timestamp when an item is marked DONE
          lognotedone        record timestamp and a note when DONE
          nologdone          don't record when items are marked DONE
          logrepeat          record a time when reinstating a repeating item
          lognoterepeat      record a note when reinstating a repeating item
          nologrepeat        do not record when reinstating repeating item
          lognoteclock-out   record a note when clocking out
          nolognoteclock-out don't record a note when clocking out
     Here are the options for hiding leading stars in outline headings,
     and for indenting outlines.  The corresponding variables are
     `org-hide-leading-stars' and `org-odd-levels-only', both with a
     default setting `nil' (meaning `showstars' and `oddeven').  
          hidestars  make all but one of the stars starting a headline invisible.
          showstars  show all stars starting a headline
          indent     virtual indentation according to outline level
          noindent   no virtual indentation according to outline level
          odd        allow only odd outline levels (1,3,...)
          oddeven    allow all outline levels
     To turn on custom format overlays over time stamps (variables
     `org-put-time-stamp-overlays' and
     `org-time-stamp-overlay-formats'), use 
          customtime overlay custom time format
     The following options influence the table spreadsheet (variable
     `constants-unit-system').  
          constcgs   `constants.el' should use the c-g-s unit system
          constSI    `constants.el' should use the SI unit system
     To influence footnote settings, use the following keywords.  The
     corresponding variables are `org-footnote-define-inline' and
     `org-footnote-auto-label'.  
          fninline    define footnotes inline
          fnnoinline  define footnotes in separate section
          fnlocal     define footnotes near first reference, but not inline
          fnprompt    prompt for footnote labels
          fnauto      create [fn:1]-like labels automatically (default)
          fnconfirm   offer automatic label for editing or confirmation
          fnplain     create [1]-like labels automatically

`#+TAGS:  TAG1(c1) TAG2(c2)'
     These lines (several such lines are allowed) specify the valid
     tags in this file, and (potentially) the corresponding _fast tag
     selection_ keys.  The corresponding variable is `org-tag-alist'.

`#+TBLFM:'
     This line contains the formulas for the table directly above the
     line.

`#+TITLE:, #+AUTHOR:, #+EMAIL:, #+LANGUAGE:, #+TEXT:, #+OPTIONS, #+DATE:'
     These lines provide settings for exporting files.  For more
     details see *note Export options::.

`#+SEQ_TODO:   #+TYP_TODO:'
     These lines set the TODO keywords and their interpretation in the
     current file.  The corresponding variables are `org-todo-keywords'
     and `org-todo-interpretation'.


File: org,  Node: The very busy C-c C-c key,  Next: Clean view,  Prev: In-buffer settings,  Up: Miscellaneous

14.4 The very busy C-c C-c key
==============================

The key `C-c C-c' has many purposes in Org, which are all mentioned
scattered throughout this manual.  One specific function of this key is
to add _tags_ to a headline (*note Tags::).  In many other
circumstances it means something like _Hey Org, look here and update
according to what you see here_.  Here is a summary of what this means
in different contexts.

   - If there are highlights in the buffer from the creation of a sparse
     tree, or from clock display, remove these highlights.

   - If the cursor is in one of the special `#+KEYWORD' lines, this
     triggers scanning the buffer for these lines and updating the
     information.

   - If the cursor is inside a table, realign the table.  This command
     works even if the automatic table editor has been turned off.

   - If the cursor is on a `#+TBLFM' line, re-apply the formulas to the
     entire table.

   - If the cursor is inside a table created by the `table.el' package,
     activate that table.

   - If the current buffer is a remember buffer, close the note and
     file it.  With a prefix argument, file it, without further
     interaction, to the default location.

   - If the cursor is on a `<<<target>>>', update radio targets and
     corresponding links in this buffer.

   - If the cursor is in a property line or at the start or end of a
     property drawer, offer property commands.

   - If the cursor is at a footnote reference, go to the corresponding
     definition, and vice versa.

   - If the cursor is in a plain list item with a checkbox, toggle the
     status of the checkbox.

   - If the cursor is on a numbered item in a plain list, renumber the
     ordered list.

   - If the cursor is on the `#+BEGIN' line of a dynamical block, the
     block is updated.


File: org,  Node: Clean view,  Next: TTY keys,  Prev: The very busy C-c C-c key,  Up: Miscellaneous

14.5 A cleaner outline view
===========================

Some people find it noisy and distracting that the Org headlines are
starting with a potentially large number of stars, and that text below
the headlines is not indented.  This is not really a problem when you
are writing a book where the outline headings are really section
headlines.  However, in a more list-oriented outline, it is clear that
an indented structure is a lot cleaner, as can be seen by comparing the
two columns in the following example:

     * Top level headline             |    * Top level headline
     ** Second level                  |      * Second level
     *** 3rd level                    |        * 3rd level
     some text                        |          some text
     *** 3rd level                    |        * 3rd level
     more text                        |          more text
     * Another top level headline     |    * Another top level headline

It is non-trivial to make such a look work in Emacs, but Org contains
three separate features that, combined, achieve just that.

  1. _Indentation of text below headlines_
     You may indent text below each headline to make the left boundary
     line up with the headline, like

          *** 3rd level
              more text, now indented

     A good way to get this indentation is by hand, and Org supports
     this with paragraph filling, line wrapping, and structure
     editing(1) preserving or adapting the indentation appropriate.  A
     different approach would be to have a way to automatically indent
     lines according to outline structure by adding overlays or text
     properties.  But I have not yet found a robust and efficient way to
     do this in large files.

  2. _Hiding leading stars_
     You can modify the display in such a way that all leading stars
     become invisible.  To do this in a global way, configure the
     variable `org-hide-leading-stars' or change this on a per-file
     basis with

          #+STARTUP: hidestars

     Note that the opposite behavior is selected with `showstars'.

     With hidden stars, the tree becomes:

          * Top level headline
           * Second level
            * 3rd level
            ...

     Note that the leading stars are not truly replaced by whitespace,
     they are only fontified with the face `org-hide' that uses the
     background color as font color.  If you are not using either white
     or black background, you may have to customize this face to get
     the wanted effect.  Another possibility is to set this font such
     that the extra stars are almost invisible, for example using the
     color `grey90' on a white background.

  3. Things become cleaner still if you skip all the even levels and
     use only odd levels 1, 3, 5..., effectively adding two stars to go
     from one outline level to the next.  In this way we get the
     outline view shown at the beginning of this section.  In order to
     make the structure editing and export commands handle this
     convention correctly, configure the variable
     `org-odd-levels-only', or set this on a per-file basis with one of
     the following lines:

          #+STARTUP: odd
          #+STARTUP: oddeven

     You can convert an Org file from single-star-per-level to the
     double-star-per-level convention with `M-x
     org-convert-to-odd-levels RET' in that file.  The reverse
     operation is `M-x org-convert-to-oddeven-levels'.

   ---------- Footnotes ----------

   (1) See also the variable `org-adapt-indentation'.


File: org,  Node: TTY keys,  Next: Interaction,  Prev: Clean view,  Up: Miscellaneous

14.6 Using Org on a tty
=======================

Because Org contains a large number of commands, by default much of
Org's core commands are bound to keys that are generally not accessible
on a tty, such as the cursor keys (<left>, <right>, <up>, <down>),
<TAB> and <RET>, in particular when used together with modifiers like
<Meta> and/or <Shift>.  To access these commands on a tty when special
keys are unavailable, the following alternative bindings can be used.
The tty bindings below will likely be more cumbersome; you may find for
some of the bindings below that a customized work-around suits you
better.  For example, changing a time stamp is really only fun with
`S-<cursor>' keys, whereas on a tty you would rather use `C-c .' to
re-insert the timestamp.

Default     Alternative 1  Alternative 2
`S-<TAB>'   `C-u <TAB>'    
`M-<left>'  `C-c C-x l'    `<Esc> <left>'
`M-S-<left>'`C-c C-x L'    
`M-<right>' `C-c C-x i'    `<Esc>
                           <right>'
`M-S-<right>'`C-c C-x R'    
`M-<up>'    `C-c C-x u'    `<Esc> <up>'
`M-S-<up>'  `C-c C-x U'    
`M-<down>'  `C-c C-x d'    `<Esc> <down>'
`M-S-<down>'`C-c C-x D'    
`S-<RET>'   `C-c C-x c'    
`M-<RET>'   `C-c C-x m'    `<Esc> <RET>'
`M-S-<RET>' `C-c C-x M'    
`S-<left>'  `C-c <left>'   
`S-<right>' `C-c <right>'  
`S-<up>'    `C-c <up>'     
`S-<down>'  `C-c <down>'   
`C-S-<left>'`C-c C-x       
            <left>'        
`C-S-<right>'`C-c C-x       
            <right>'       


File: org,  Node: Interaction,  Next: Bugs,  Prev: TTY keys,  Up: Miscellaneous

14.7 Interaction with other packages
====================================

Org lives in the world of GNU Emacs and interacts in various ways with
other code out there.

* Menu:

* Cooperation::                 Packages Org cooperates with
* Conflicts::                   Packages that lead to conflicts


File: org,  Node: Cooperation,  Next: Conflicts,  Prev: Interaction,  Up: Interaction

14.7.1 Packages that Org cooperates with
----------------------------------------

`calc.el' by Dave Gillespie
     Org uses the Calc package for implementing spreadsheet
     functionality in its tables (*note The spreadsheet::).  Org checks
     for the availability of Calc by looking for the function
     `calc-eval' which should be autoloaded in your setup if Calc has
     been installed properly.  As of Emacs 22, Calc is part of the Emacs
     distribution.  Another possibility for interaction between the two
     packages is using Calc for embedded calculations. *Note Embedded
     Mode: (Calc)Embedded Mode.  

`constants.el' by Carsten Dominik
     In a table formula (*note The spreadsheet::), it is possible to use
     names for natural constants or units.  Instead of defining your own
     constants in the variable `org-table-formula-constants', install
     the `constants' package which defines a large number of constants
     and units, and lets you use unit prefixes like `M' for `Mega' etc.
     You will need version 2.0 of this package, available at
     `http://www.astro.uva.nl/~dominik/Tools'. Org checks for the
     function `constants-get', which has to be autoloaded in your
     setup.  See the installation instructions in the file
     `constants.el'.

`cdlatex.el' by Carsten Dominik
     Org mode can make use of the CDLaTeX package to efficiently enter
     LaTeX fragments into Org files. See *note CDLaTeX mode::.

`imenu.el' by Ake Stenhoff and Lars Lindberg
     Imenu allows menu access to an index of items in a file.  Org mode
     supports Imenu - all you need to do to get the index is the
     following:
          (add-hook 'org-mode-hook
                    (lambda () (imenu-add-to-menubar "Imenu")))
     By default the index is two levels deep - you can modify the depth
     using the option `org-imenu-depth'.

`remember.el' by John Wiegley
     Org cooperates with remember, see *note Remember::.  `Remember.el'
     is not part of Emacs, find it on the web.

`speedbar.el' by Eric M. Ludlam
     Speedbar is a package that creates a special frame displaying
     files and index items in files.  Org mode supports Speedbar and
     allows you to drill into Org files directly from the Speedbar.  It
     also allows to restrict the scope of agenda commands to a file or
     a subtree by using the command `<' in the Speedbar frame.  

`table.el' by Takaaki Ota
     Complex ASCII tables with automatic line wrapping, column- and
     row-spanning, and alignment can be created using the Emacs table
     package by Takaaki Ota (`http://sourceforge.net/projects/table',
     and also part of Emacs 22).  When <TAB> or `C-c C-c' is pressed in
     such a table, Org mode will call `table-recognize-table' and move
     the cursor into the table.  Inside a table, the keymap of Org mode
     is inactive.  In order to execute Org mode-related commands, leave
     the table.

    `C-c C-c'
          Recognize `table.el' table.  Works when the cursor is in a
          table.el table.  

    `C-c ~'
          Insert a table.el table.  If there is already a table at
          point, this command converts it between the table.el format
          and the Org mode format.  See the documentation string of the
          command `org-convert-table' for the restrictions under which
          this is possible.
     `table.el' is part of Emacs 22.  

`footnote.el' by Steven L. Baur
     Org mode recognizes numerical footnotes as provided by this
     package.  However, Org-mode also has its own footnote support
     (*note Footnotes::), which makes using `footnote.el' unnecessary.


File: org,  Node: Conflicts,  Prev: Cooperation,  Up: Interaction

14.7.2 Packages that lead to conflicts with Org mode
----------------------------------------------------

     In Emacs 23, `shift-selection-mode' is on by default, meaning that
     cursor motions combined with the shift key should start or enlarge
     regions.  This conflicts with the use of `S-<cursor>' commands in
     Org to change timestamps, TODO keywords, priorities, and item
     bullet types if the cursor is at such a location.  By default,
     `S-<cursor>' commands outside special contexts don't do anything,
     but you can customize the variable `org-support-shift-select'.
     Org-mode then tries to accommodate shift selection by (i) using it
     outside of the special contexts where special commands apply, and
     by (ii) extending an existing active region even if the cursor
     moves across a special context.

`CUA.el' by Kim. F. Storm
     Key bindings in Org conflict with the `S-<cursor>' keys used by
     CUA mode (as well as pc-select-mode and s-region-mode) to select
     and extend the region.  In fact, Emacs 23 has this built-in in the
     form of `shift-selection-mode', see previous paragraph.  If you
     are using Emacs 23 you probably don't want to use another package
     for this purpose.  However, if you prefer to leave these keys to a
     different package while working in Org-mode, configure the
     variable `org-replace-disputed-keys'.  When set, Org will move the
     following key bindings in Org files, and in the agenda buffer (but
     not during date selection).

          S-UP      ->  M-p             S-DOWN     ->  M-n
          S-LEFT    ->  M--             S-RIGHT    ->  M-+
          C-S-LEFT  ->  M-S--           C-S-RIGHT  ->  M-S-+

     Yes, these are unfortunately more difficult to remember.  If you
     want to have other replacement keys, look at the variable
     `org-disputed-keys'.

`windmove.el' by Hovav Shacham
     Also this package uses the `S-<cursor>' keys, so everything written
     in the paragraph above about CUA mode also applies here.



File: org,  Node: Bugs,  Prev: Interaction,  Up: Miscellaneous

14.8 Bugs
=========

Here is a list of things that should work differently, but which I have
found too hard to fix.

   * If a table field starts with a link, and if the corresponding table
     column is narrowed (*note Narrow columns::) to a width too small to
     display the link, the field would look entirely empty even though
     it is not.  To prevent this, Org throws an error.  The work-around
     is to make the column wide enough to fit the link, or to add some
     text (at least 2 characters) before the link in the same field.

   * Narrowing table columns does not work on XEmacs, because the
     `format' function does not transport text properties.

   * Text in an entry protected with the `QUOTE' keyword should not
     autowrap.

   * When the application called by `C-c C-o' to open a file link fails
     (for example because the application does not exist or refuses to
     open the file), it does so silently.  No error message is
     displayed.

   * Recalculating a table line applies the formulas from left to right.
     If a formula uses _calculated_ fields further down the row,
     multiple recalculation may be needed to get all fields consistent.
     You may use the command `org-table-iterate' (`C-u C-c *') to
     recalculate until convergence.

   * The exporters work well, but could be made more efficient.


File: org,  Node: Extensions,  Next: Hacking,  Prev: Miscellaneous,  Up: Top

Appendix A Extensions
*********************

This appendix lists the extension modules that have been written for
Org.  Many of these extensions live in the `contrib' directory of the
Org distribution, others are available somewhere on the web.

* Menu:

* Extensions in the contrib directory::  These come with the Org distro
* Other extensions::            These you have to find on the web.


File: org,  Node: Extensions in the contrib directory,  Next: Other extensions,  Prev: Extensions,  Up: Extensions

A.1 Extensions in the `contrib' directory
=========================================

A number of extension are distributed with Org when you download it
from its homepage.  Please note that these extensions are _not_
distributed as part of Emacs, so if you use Org as delivered with
Emacs, you still need to go to `http://orgmode.org' to get access to
these modules.

`org-annotate-file.el' by Philip Jackson
     Annotate a file with org syntax, in a separate file, with links
     back to the annotated file.

`org-annotation-helper.el' by Bastien Guerry and Daniel E. German
     Call remember directly from Firefox/Opera, or from Adobe Reader.
     When activating a special link or bookmark, Emacs receives a
     trigger to create a note with a link back to the website.
     Requires some setup, a detailed description is in
     `contrib/packages/org-annotation-helper'.

`org-bookmark.el' by Tokuya Kameshima
     Support for links to Emacs bookmarks.

`org-depend.el' by Carsten Dominik
     TODO dependencies for Org-mode.  Make TODO state changes in one
     entry trigger changes in another, or be blocked by the state of
     another entry.  Also, easily create chains of TODO items with
     exactly one active item at any time.

`org-elisp-symbol.el' by Bastien Guerry
     Org links to emacs-lisp symbols.  This can create annotated links
     that exactly point to the definition location of a variable of
     function.

`org-eval.el' by Carsten Dominik
     The `<lisp>' tag, adapted from Emacs Wiki and Emacs Muse, allows
     text to be included in a document that is the result of evaluating
     some code.  Other scripting languages like `perl' can be supported
     with this package as well.

`org-eval-light.el' by Eric Schulte
     User-controlled evaluation of code in an Org buffer.

`org-exp-blocks.el' by Eric Schulte
     Preprocess user-defined blocks for export.

`org-expiry.el' by Bastien Guerry
     Expiry mechanism for Org entries.

`org-indent.el' by Carsten Dominik
     Dynamic indentation of Org outlines.  The plan is to indent an
     outline according to level, but so far this is too hard for a
     proper and stable implementation.  Still, it works somewhat.

`org-interactive-query.el' by Christopher League
     Interactive modification of tags queries.  After running a general
     query in Org, this package allows you to narrow down the results
     by adding more tags or keywords.

`org-mairix.el' by Georg C. F. Greve
     Hook mairix search into Org for different MUAs.

`org-man.el' by Carsten Dominik
     Support for links to manpages in Org-mode.

`org-mtags.el' by Carsten Dominik
     Support for some Muse-like tags in Org-mode.  This package allows
     you to write `<example>' and `<src>' and other syntax copied from
     Emacs Muse, right inside an Org file.  The goal here is to make it
     easy to publish the same file using either org-publish or Muse.

`org-panel.el' by Lennart Borgman
     Simplified and display-aided access to some Org commands.

`org-registry.el' by Bastien Guerry
     A registry for Org links, to find out from where links point to a
     given file or location.

`org2rem.el' by Bastien Guerry
     Convert org appointments into reminders for the `remind' program.

`org-screen.el' by Andrew Hyatt
     Visit screen sessions through Org-mode links.

`org-toc.el' by Bastien Guerry
     Table of contents in a separate buffer, with fast access to
     sections and easy visibility cycling.

`orgtbl-sqlinsert.el' by Jason Riedy
     Convert Org-mode tables to SQL insertions.  Documentation for this
     can be found on the Worg pages.



File: org,  Node: Other extensions,  Prev: Extensions in the contrib directory,  Up: Extensions

A.2 Other extensions
====================

TO BE DONE


File: org,  Node: Hacking,  Next: History and Acknowledgments,  Prev: Extensions,  Up: Top

Appendix B Hacking
******************

This appendix covers some aspects where users can extend the
functionality of Org.

* Menu:

* Adding hyperlink types::      New custom link types
* Tables in arbitrary syntax::  Orgtbl for LaTeX and other programs
* Dynamic blocks::              Automatically filled blocks
* Special agenda views::        Customized views
* Using the property API::      Writing programs that use entry properties
* Using the mapping API::       Mapping over all or selected entries


File: org,  Node: Adding hyperlink types,  Next: Tables in arbitrary syntax,  Prev: Hacking,  Up: Hacking

B.1 Adding hyperlink types
==========================

Org has a large number of hyperlink types built-in (*note
Hyperlinks::).  If you would like to add new link types, it provides an
interface for doing so.  Let's look at an example file `org-man.el'
that will add support for creating links like `[[man:printf][The printf
manpage]]' to show Unix manual pages inside emacs:

     ;;; org-man.el - Support for links to manpages in Org

     (require 'org)

     (org-add-link-type "man" 'org-man-open)
     (add-hook 'org-store-link-functions 'org-man-store-link)

     (defcustom org-man-command 'man
       "The Emacs command to be used to display a man page."
       :group 'org-link
       :type '(choice (const man) (const woman)))

     (defun org-man-open (path)
       "Visit the manpage on PATH.
     PATH should be a topic that can be thrown at the man command."
       (funcall org-man-command path))

     (defun org-man-store-link ()
       "Store a link to a manpage."
       (when (memq major-mode '(Man-mode woman-mode))
         ;; This is a man page, we do make this link
         (let* ((page (org-man-get-page-name))
                (link (concat "man:" page))
                (description (format "Manpage for %s" page)))
           (org-store-link-props
            :type "man"
            :link link
            :description description))))

     (defun org-man-get-page-name ()
       "Extract the page name from the buffer name."
       ;; This works for both `Man-mode' and `woman-mode'.
       (if (string-match " \\(\\S-+\\)\\*" (buffer-name))
           (match-string 1 (buffer-name))
         (error "Cannot create link to this man page")))

     (provide 'org-man)

     ;;; org-man.el ends here

You would activate this new link type in `.emacs' with

     (require 'org-man)

Let's go through the file and see what it does.
  1. It does `(require 'org)' to make sure that `org.el' has been
     loaded.

  2. The next line calls `org-add-link-type' to define a new link type
     with prefix `man'.  The call also contains the name of a function
     that will be called to follow such a link.

  3. The next line adds a function to `org-store-link-functions', in
     order to allow the command `C-c l' to record a useful link in a
     buffer displaying a man page.

   The rest of the file defines the necessary variables and functions.
First there is a customization variable that determines which emacs
command should be used to display man pages.  There are two options,
`man' and `woman'.  Then the function to follow a link is defined.  It
gets the link path as an argument - in this case the link path is just
a topic for the manual command.  The function calls the value of
`org-man-command' to display the man page.

   Finally the function `org-man-store-link' is defined.  When you try
to store a link with `C-c l', also this function will be called to try
to make a link.  The function must first decide if it is supposed to
create the link for this buffer type, we do this by checking the value
of the variable `major-mode'.  If not, the function must exit and
return the value `nil'.  If yes, the link is created by getting the
manual topic from the buffer name and prefixing it with the string
`man:'.  Then it must call the command `org-store-link-props' and set
the `:type' and `:link' properties.  Optionally you can also set the
`:description' property to provide a default for the link description
when the link is later inserted into an Org buffer with `C-c C-l'.


File: org,  Node: Tables in arbitrary syntax,  Next: Dynamic blocks,  Prev: Adding hyperlink types,  Up: Hacking

B.2 Tables and lists in arbitrary syntax
========================================

Since Orgtbl mode can be used as a minor mode in arbitrary buffers, a
frequent feature request has been to make it work with native tables in
specific languages, for example LaTeX.  However, this is extremely hard
to do in a general way, would lead to a customization nightmare, and
would take away much of the simplicity of the Orgtbl mode table editor.

   This appendix describes a different approach.  We keep the Orgtbl
mode table in its native format (the source table), and use a custom
function to translate the table to the correct syntax, and to install
it in the right location (the target table).  This puts the burden of
writing conversion functions on the user, but it allows for a very
flexible system.

   Bastien added the ability to do the same with lists.  You can use
Org's facilities to edit and structure lists by turning `orgstruct-mode'
on, then locally exporting such lists in another format (HTML, LaTeX or
Texinfo.)

* Menu:

* Radio tables::                Sending and receiving
* A LaTeX example::             Step by step, almost a tutorial
* Translator functions::        Copy and modify
* Radio lists::                 Doing the same for lists


File: org,  Node: Radio tables,  Next: A LaTeX example,  Prev: Tables in arbitrary syntax,  Up: Tables in arbitrary syntax

B.2.1 Radio tables
------------------

To define the location of the target table, you first need to create two
lines that are comments in the current mode, but contain magic words for
Orgtbl mode to find.  Orgtbl mode will insert the translated table
between these lines, replacing whatever was there before.  For example:

     /* BEGIN RECEIVE ORGTBL table_name */
     /* END RECEIVE ORGTBL table_name */

Just above the source table, we put a special line that tells Orgtbl
mode how to translate this table and where to install it.  For example:
     #+ORGTBL: SEND table_name translation_function arguments....

`table_name' is the reference name for the table that is also used in
the receiver lines. `translation_function' is the Lisp function that
does the translation.  Furthermore, the line can contain a list of
arguments (alternating key and value) at the end.  The arguments will be
passed as a property list to the translation function for
interpretation.  A few standard parameters are already recognized and
acted upon before the translation function is called:

`:skip N'
     Skip the first N lines of the table.  Hlines do count as separate
     lines for this parameter!

`:skipcols (n1 n2 ...)'
     List of columns that should be skipped.  If the table has a column
     with calculation marks, that column is automatically discarded as
     well.  Please note that the translator function sees the table
     _after_ the removal of these columns, the function never knows
     that there have been additional columns.

The one problem remaining is how to keep the source table in the buffer
without disturbing the normal workings of the file, for example during
compilation of a C file or processing of a LaTeX file.  There are a
number of different solutions:

   * The table could be placed in a block comment if that is supported
     by the language.  For example, in C mode you could wrap the table
     between `/*' and `*/' lines.

   * Sometimes it is possible to put the table after some kind of END
     statement, for example `\bye' in TeX and `\end{document}' in LaTeX.

   * You can just comment the table line by line whenever you want to
     process the file, and uncomment it whenever you need to edit the
     table.  This only sounds tedious - the command `M-x
     orgtbl-toggle-comment' does make this comment-toggling very easy,
     in particular if you bind it to a key.


File: org,  Node: A LaTeX example,  Next: Translator functions,  Prev: Radio tables,  Up: Tables in arbitrary syntax

B.2.2 A LaTeX example of radio tables
-------------------------------------

The best way to wrap the source table in LaTeX is to use the `comment'
environment provided by `comment.sty'.  It has to be activated by
placing `\usepackage{comment}' into the document header.  Orgtbl mode
can insert a radio table skeleton(1)  with the command `M-x
orgtbl-insert-radio-table'.  You will be prompted for a table name,
let's say we use `salesfigures'.  You will then get the following
template:

     % BEGIN RECEIVE ORGTBL salesfigures
     % END RECEIVE ORGTBL salesfigures
     \begin{comment}
     #+ORGTBL: SEND salesfigures orgtbl-to-latex
     | | |
     \end{comment}

The `#+ORGTBL: SEND' line tells Orgtbl mode to use the function
`orgtbl-to-latex' to convert the table into LaTeX and to put it into
the receiver location with name `salesfigures'.  You may now fill in
the table, feel free to use the spreadsheet features(2):

     % BEGIN RECEIVE ORGTBL salesfigures
     % END RECEIVE ORGTBL salesfigures
     \begin{comment}
     #+ORGTBL: SEND salesfigures orgtbl-to-latex
     | Month | Days | Nr sold | per day |
     |-------+------+---------+---------|
     | Jan   |   23 |      55 |     2.4 |
     | Feb   |   21 |      16 |     0.8 |
     | March |   22 |     278 |    12.6 |
     #+TBLFM: $4=$3/$2;%.1f
     % $ (optional extra dollar to keep font-lock happy, see footnote)
     \end{comment}

When you are done, press `C-c C-c' in the table to get the converted
table inserted between the two marker lines.

   Now let's assume you want to make the table header by hand, because
you want to control how columns are aligned etc.  In this case we make
sure that the table translator does skip the first 2 lines of the source
table, and tell the command to work as a splice, i.e. to not produce
header and footer commands of the target table:

     \begin{tabular}{lrrr}
     Month & \multicolumn{1}{c}{Days} & Nr.\ sold & per day\\
     % BEGIN RECEIVE ORGTBL salesfigures
     % END RECEIVE ORGTBL salesfigures
     \end{tabular}
     %
     \begin{comment}
     #+ORGTBL: SEND salesfigures orgtbl-to-latex :splice t :skip 2
     | Month | Days | Nr sold | per day |
     |-------+------+---------+---------|
     | Jan   |   23 |      55 |     2.4 |
     | Feb   |   21 |      16 |     0.8 |
     | March |   22 |     278 |    12.6 |
     #+TBLFM: $4=$3/$2;%.1f
     \end{comment}

   The LaTeX translator function `orgtbl-to-latex' is already part of
Orgtbl mode.  It uses a `tabular' environment to typeset the table and
marks horizontal lines with `\hline'.  Furthermore, it interprets the
following parameters (see also *note Translator functions::):

`:splice nil/t'
     When set to t, return only table body lines, don't wrap them into a
     tabular environment.  Default is nil.

`:fmt fmt'
     A format to be used to wrap each field, should contain `%s' for the
     original field value.  For example, to wrap each field value in
     dollars, you could use `:fmt "$%s$"'.  This may also be a property
     list with column numbers and formats. for example `:fmt (2 "$%s$"
     4 "%s\\%%")'.  A function of one argument can be used in place of
     the strings; the function must return a formatted string.

`:efmt efmt'
     Use this format to print numbers with exponentials.  The format
     should have `%s' twice for inserting mantissa and exponent, for
     example `"%s\\times10^{%s}"'.  The default is `"%s\\,(%s)"'.  This
     may also be a property list with column numbers and formats, for
     example `:efmt (2 "$%s\\times10^{%s}$" 4 "$%s\\cdot10^{%s}$")'.
     After `efmt' has been applied to a value, `fmt' will also be
     applied.  Similar to `fmt', functions of two arguments can be
     supplied instead of strings.

   ---------- Footnotes ----------

   (1) By default this works only for LaTeX, HTML, and Texinfo.
Configure the variable `orgtbl-radio-tables' to install templates for
other modes.

   (2) If the `#+TBLFM' line contains an odd number of dollar
characters, this may cause problems with font-lock in LaTeX mode.  As
shown in the example you can fix this by adding an extra line inside the
`comment' environment that is used to balance the dollar expressions.
If you are using AUCTeX with the font-latex library, a much better
solution is to add the `comment' environment to the variable
`LaTeX-verbatim-environments'.


File: org,  Node: Translator functions,  Next: Radio lists,  Prev: A LaTeX example,  Up: Tables in arbitrary syntax

B.2.3 Translator functions
--------------------------

Orgtbl mode has several translator functions built-in: `orgtbl-to-csv'
(comma-separated values), `orgtbl-to-tsv' (TAB-separated values)
`orgtbl-to-latex', `orgtbl-to-html', and `orgtbl-to-texinfo'.  Except
for `orgtbl-to-html'(1), these all use a generic translator,
`orgtbl-to-generic'.  For example, `orgtbl-to-latex' itself is a very
short function that computes the column definitions for the `tabular'
environment, defines a few field and line separators and then hands
over to the generic translator.  Here is the entire code:

     (defun orgtbl-to-latex (table params)
       "Convert the Orgtbl mode TABLE to LaTeX."
       (let* ((alignment (mapconcat (lambda (x) (if x "r" "l"))
                                    org-table-last-alignment ""))
              (params2
               (list
                :tstart (concat "\\begin{tabular}{" alignment "}")
                :tend "\\end{tabular}"
                :lstart "" :lend " \\\\" :sep " & "
                :efmt "%s\\,(%s)" :hline "\\hline")))
         (orgtbl-to-generic table (org-combine-plists params2 params))))

   As you can see, the properties passed into the function (variable
PARAMS) are combined with the ones newly defined in the function
(variable PARAMS2).  The ones passed into the function (i.e. the ones
set by the `ORGTBL SEND' line) take precedence.  So if you would like
to use the LaTeX translator, but wanted the line endings to be
`\\[2mm]' instead of the default `\\', you could just overrule the
default with

     #+ORGTBL: SEND test orgtbl-to-latex :lend " \\\\[2mm]"

   For a new language, you can either write your own converter function
in analogy with the LaTeX translator, or you can use the generic
function directly.  For example, if you have a language where a table
is started with `!BTBL!', ended with `!ETBL!', and where table lines are
started with `!BL!', ended with `!EL!' and where the field separator is
a TAB, you could call the generic translator like this (on a single
line!):

     #+ORGTBL: SEND test orgtbl-to-generic :tstart "!BTBL!" :tend "!ETBL!"
                                   :lstart "!BL! " :lend " !EL!" :sep "\t"

Please check the documentation string of the function
`orgtbl-to-generic' for a full list of parameters understood by that
function and remember that you can pass each of them into
`orgtbl-to-latex', `orgtbl-to-texinfo', and any other function using
the generic function.

   Of course you can also write a completely new function doing
complicated things the generic translator cannot do.  A translator
function takes two arguments.  The first argument is the table, a list
of lines, each line either the symbol `hline' or a list of fields.  The
second argument is the property list containing all parameters
specified in the `#+ORGTBL: SEND' line.  The function must return a
single string containing the formatted table.  If you write a generally
useful translator, please post it on `emacs-orgmode@gnu.org' so that
others can benefit from your work.

   ---------- Footnotes ----------

   (1) The HTML translator uses the same code that produces tables
during HTML export.


File: org,  Node: Radio lists,  Prev: Translator functions,  Up: Tables in arbitrary syntax

B.2.4 Radio lists
-----------------

Sending and receiving radio lists works exactly the same way than
sending and receiving radio tables (*note Radio tables::) (1).  As for
radio tables, you can insert radio lists templates in HTML, LaTeX and
Texinfo modes by calling `org-list-insert-radio-list'.

   Here are the differences with radio tables:

   - Use `ORGLST' instead of `ORGTBL'.

   - The available translation functions for radio lists don't take
     parameters.

   - `C-c C-c' will work when pressed on the first item of the list.

   Here is a LaTeX example.  Let's say that you have this in your LaTeX
file:

     % BEGIN RECEIVE ORGLST to-buy
     % END RECEIVE ORGLST to-buy
     \begin{comment}
     #+ORGLIST: SEND to-buy orgtbl-to-latex
     - a new house
     - a new computer
       + a new keyboard
       + a new mouse
     - a new life
     \end{comment}

   Pressing `C-c C-c' on `a new house' and will insert the converted
LaTeX list between the two marker lines.

   ---------- Footnotes ----------

   (1) You need to load the `org-export-latex.el' package to use radio
lists since the relevant code is there for now.


File: org,  Node: Dynamic blocks,  Next: Special agenda views,  Prev: Tables in arbitrary syntax,  Up: Hacking

B.3 Dynamic blocks
==================

Org documents can contain _dynamic blocks_.  These are specially marked
regions that are updated by some user-written function.  A good example
for such a block is the clock table inserted by the command `C-c C-x
C-r' (*note Clocking work time::).

   Dynamic block are enclosed by a BEGIN-END structure that assigns a
name to the block and can also specify parameters for the function
producing the content of the block.

   #+BEGIN:dynamic block
     #+BEGIN: myblock :parameter1 value1 :parameter2 value2 ...

     #+END:

   Dynamic blocks are updated with the following commands

`C-c C-x C-u'
     Update dynamic block at point.  

`C-u C-c C-x C-u'
     Update all dynamic blocks in the current file.

   Updating a dynamic block means to remove all the text between BEGIN
and END, parse the BEGIN line for parameters and then call the specific
writer function for this block to insert the new content.  If you want
to use the original content in the writer function, you can use the
extra parameter `:content'.

   For a block with name `myblock', the writer function is
`org-dblock-write:myblock' with as only parameter a property list with
the parameters given in the begin line.  Here is a trivial example of a
block that keeps track of when the block update function was last run:

     #+BEGIN: block-update-time :format "on %m/%d/%Y at %H:%M"

     #+END:

The corresponding block writer function could look like this:

     (defun org-dblock-write:block-update-time (params)
        (let ((fmt (or (plist-get params :format) "%d. %m. %Y")))
          (insert "Last block update at: "
                  (format-time-string fmt (current-time)))))

   If you want to make sure that all dynamic blocks are always
up-to-date, you could add the function `org-update-all-dblocks' to a
hook, for example `before-save-hook'.  `org-update-all-dblocks' is
written in a way that is does nothing in buffers that are not in
`org-mode'.


File: org,  Node: Special agenda views,  Next: Using the property API,  Prev: Dynamic blocks,  Up: Hacking

B.4 Special agenda views
========================

Org provides a special hook that can be used to narrow down the
selection made by any of the agenda views.  You may specify a function
that is used at each match to verify if the match should indeed be part
of the agenda view, and if not, how much should be skipped.

   Let's say you want to produce a list of projects that contain a
WAITING tag anywhere in the project tree.  Let's further assume that
you have marked all tree headings that define a project with the TODO
keyword PROJECT.  In this case you would run a TODO search for the
keyword PROJECT, but skip the match unless there is a WAITING tag
anywhere in the subtree belonging to the project line.

   To achieve this, you must write a function that searches the subtree
for the tag.  If the tag is found, the function must return `nil' to
indicate that this match should not be skipped.  If there is no such
tag, return the location of the end of the subtree, to indicate that
search should continue from there.

     (defun my-skip-unless-waiting ()
       "Skip trees that are not waiting"
       (let ((subtree-end (save-excursion (org-end-of-subtree t))))
         (if (re-search-forward ":waiting:" subtree-end t)
             nil          ; tag found, do not skip
           subtree-end))) ; tag not found, continue after end of subtree

   Now you may use this function in an agenda custom command, for
example like this:

     (org-add-agenda-custom-command
      '("b" todo "PROJECT"
        ((org-agenda-skip-function 'my-skip-unless-waiting)
         (org-agenda-overriding-header "Projects waiting for something: "))))

   Note that this also binds `org-agenda-overriding-header' to get a
meaningful header in the agenda view.

   A general way to create custom searches is to base them on a search
for entries with a certain level limit.  If you want to study all
entries with your custom search function, simply do a search for
`LEVEL>0', and then use `org-agenda-skip-function' to select the
entries you really want to have.

   You may also put a Lisp form into `org-agenda-skip-function'.  In
particular, you may use the functions `org-agenda-skip-entry-if' and
`org-agenda-skip-subtree-if' in this form, for example:

`'(org-agenda-skip-entry-if 'scheduled)'
     Skip current entry if it has been scheduled.

`'(org-agenda-skip-entry-if 'notscheduled)'
     Skip current entry if it has not been scheduled.

`'(org-agenda-skip-entry-if 'deadline)'
     Skip current entry if it has a deadline.

`'(org-agenda-skip-entry-if 'scheduled 'deadline)'
     Skip current entry if it has a deadline, or if it is scheduled.

`'(org-agenda-skip-entry 'regexp "regular expression")'
     Skip current entry if the regular expression matches in the entry.

`'(org-agenda-skip-entry 'notregexp "regular expression")'
     Skip current entry unless the regular expression matches.

`'(org-agenda-skip-subtree-if 'regexp "regular expression")'
     Same as above, but check and skip the entire subtree.

   Therefore we could also have written the search for WAITING projects
like this, even without defining a special function:

     (org-add-agenda-custom-command
      '("b" todo "PROJECT"
        ((org-agenda-skip-function '(org-agenda-skip-subtree-if
                                     'regexp ":waiting:"))
         (org-agenda-overriding-header "Projects waiting for something: "))))


File: org,  Node: Using the property API,  Next: Using the mapping API,  Prev: Special agenda views,  Up: Hacking

B.5 Using the property API
==========================

Here is a description of the functions that can be used to work with
properties.

 -- Function: org-entry-properties &optional pom which
     Get all properties of the entry at point-or-marker POM.  This
     includes the TODO keyword, the tags, time strings for deadline,
     scheduled, and clocking, and any additional properties defined in
     the entry.  The return value is an alist, keys may occur multiple
     times if the property key was used several times.  POM may also be
     nil, in which case the current entry is used.  If WHICH is nil or
     `all', get all properties.  If WHICH is `special' or `standard',
     only get that subclass.

 -- Function: org-entry-get pom property &optional inherit
     Get value of PROPERTY for entry at point-or-marker POM.  By
     default, this only looks at properties defined locally in the
     entry.  If INHERIT is non-nil and the entry does not have the
     property, then also check higher levels of the hierarchy.  If
     INHERIT is the symbol `selective', use inheritance if and only if
     the setting of `org-use-property-inheritance' selects PROPERTY for
     inheritance.

 -- Function: org-entry-delete pom property
     Delete the property PROPERTY from entry at point-or-marker POM.

 -- Function: org-entry-put pom property value
     Set PROPERTY to VALUE for entry at point-or-marker POM.

 -- Function: org-buffer-property-keys &optional include-specials
     Get all property keys in the current buffer.

 -- Function: org-insert-property-drawer
     Insert a property drawer at point.

 -- Function: org-entry-put-multivalued-property pom property &rest
          values
     Set PROPERTY at point-or-marker POM to VALUES.  VALUES should be a
     list of strings.  They will be concatenated, with spaces as
     separators.

 -- Function: org-entry-get-multivalued-property pom property
     Treat the value of the property PROPERTY as a whitespace-separated
     list of values and return the values as a list of strings.

 -- Function: org-entry-add-to-multivalued-property pom property value
     Treat the value of the property PROPERTY as a whitespace-separated
     list of values and make sure that VALUE is in this list.

 -- Function: org-entry-remove-from-multivalued-property pom property
          value
     Treat the value of the property PROPERTY as a whitespace-separated
     list of values and make sure that VALUE is _not_ in this list.

 -- Function: org-entry-member-in-multivalued-property pom property
          value
     Treat the value of the property PROPERTY as a whitespace-separated
     list of values and check if VALUE is in this list.


File: org,  Node: Using the mapping API,  Prev: Using the property API,  Up: Hacking

B.6 Using the mapping API
=========================

Org has sophisticated mapping capabilities to find all entries
satisfying certain criteria.  Internally, this functionality is used to
produce agenda views, but there is also an API that can be used to
execute arbitrary functions for each or selected entries.  The main
entry point for this API is:

 -- Function: org-map-entries func &optional match scope &rest skip
     Call FUNC at each headline selected by MATCH in SCOPE.

     FUNC is a function or a lisp form.  The function will be called
     without arguments, with the cursor positioned at the beginning of
     the headline.  The return values of all calls to the function will
     be collected and returned as a list.

     MATCH is a tags/property/todo match as it is used in the agenda
     match view.  Only headlines that are matched by this query will be
     considered during the iteration.  When MATCH is nil or t, all
     headlines will be visited by the iteration.

     SCOPE determines the scope of this command.  It can be any of:

          nil     the current buffer, respecting the restriction if any
          tree    the subtree started with the entry at point
          file    the current buffer, without restriction
          file-with-archives
                  the current buffer, and any archives associated with it
          agenda  all agenda files
          agenda-with-archives
                  all agenda files with any archive files associated with them
          (file1 file2 ...)
                  if this is a list, all files in the list will be scanned

     The remaining args are treated as settings for the skipping
     facilities of the scanner.  The following items can be given here:

          archive   skip trees with the archive tag
          comment   skip trees with the COMMENT keyword
          function or Lisp form
                    will be used as value for `org-agenda-skip-function',
                    so whenever the function returns t, FUNC
                    will not be called for that entry and search will
                    continue from the point where the function leaves it

   The function given to that mapping routine can really do anything
you like.  It can use the property API (*note Using the property API::)
to gather more information about the entry, or in order to change
metadata in the entry.  Here are a couple of functions that might be
handy:

 -- Function: org-todo &optional arg
     Change the TODO state of the entry, see the docstring of the
     functions for the many possible values for the argument ARG.

 -- Function: org-priority &optional action
     Change the priority of the entry, see the docstring of this
     function for the possible values for ACTION.

 -- Function: org-toggle-tag tag &optional onoff
     Toggle the tag TAG in the current entry.  Setting ONOFF to either
     `on' or `off' will not toggle tag, but ensure that it is either on
     or off.

 -- Function: org-promote
     Promote the current entry.

 -- Function: org-demote
     Demote the current entry.

   Here is a simple example that will turn all entries in the current
file with a tag `TOMORROW' into TODO entries with the keyword
`UPCOMING'.  Entries in comment trees and in archive trees will be
ignored.

     (org-map-entries
        '(org-todo "UPCOMING")
        "+TOMORROW" 'file 'archive 'comment)

   The following example counts the number of entries with TODO keyword
`WAITING', in all agenda files.

     (length (org-map-entries t "/+WAITING" 'agenda))


File: org,  Node: History and Acknowledgments,  Next: Main Index,  Prev: Hacking,  Up: Top

Appendix C History and Acknowledgments
**************************************

Org was borne in 2003, out of frustration over the user interface of
the Emacs Outline mode.  I was trying to organize my notes and
projects, and using Emacs seemed to be the natural way to go.  However,
having to remember eleven different commands with two or three keys per
command, only to hide and show parts of the outline tree, that seemed
entirely unacceptable to me.  Also, when using outlines to take notes, I
constantly want to restructure the tree, organizing it parallel to my
thoughts and plans.  _Visibility cycling_ and _structure editing_ were
originally implemented in the package `outline-magic.el', but quickly
moved to the more general `org.el'.  As this environment became
comfortable for project planning, the next step was adding _TODO
entries_, basic _time stamps_, and _table support_.  These areas
highlight the two main goals that Org still has today: To create a new,
outline-based, plain text mode with innovative and intuitive editing
features, and to incorporate project planning functionality directly
into a notes file.

   A special thanks goes to Bastien Guerry who has not only written a
large number of extensions to Org (most of them integrated into the
core by now), but has also helped the development and maintenance of
Org so much that he should be considered the main co-contributor to
this package.

   Since the first release, literally thousands of emails to me or on
`emacs-orgmode@gnu.org' have provided a constant stream of bug reports,
feedback, new ideas, and sometimes patches and add-on code.  Many
thanks to everyone who has helped to improve this package.  I am trying
to keep here a list of the people who had significant influence in
shaping one or more aspects of Org.  The list may not be complete, if I
have forgotten someone, please accept my apologies and let me know.

   * Russel Adams came up with the idea for drawers.

   * Thomas Baumann wrote `org-bbdb.el' and `org-mhe.el'.

   * Christophe Bataillon created the great unicorn logo that we use on
     the Org-mode website.

   * Alex Bochannek provided a patch for rounding time stamps.

   * Charles Cave's suggestion sparked the implementation of templates
     for Remember.

   * Pavel Chalmoviansky influenced the agenda treatment of items with
     specified time.

   * Gregory Chernov patched support for lisp forms into table
     calculations and improved XEmacs compatibility, in particular by
     porting `nouline.el' to XEmacs.

   * Sacha Chua suggested to copy some linking code from Planner.

   * Eddward DeVilla proposed and tested checkbox statistics.  He also
     came up with the idea of properties, and that there should be an
     API for them.

   * Kees Dullemond used to edit projects lists directly in HTML and so
     inspired some of the early development, including HTML export.  He
     also asked for a way to narrow wide table columns.

   * Christian Egli converted the documentation into Texinfo format,
     patched CSS formatting into the HTML exporter, and inspired the
     agenda.

   * David Emery provided a patch for custom CSS support in exported
     HTML agendas.

   * Nic Ferrier contributed mailcap and XOXO support.

   * Miguel A. Figueroa-Villanueva implemented hierarchical checkboxes.

   * John Foerch figured out how to make incremental search show context
     around a match in a hidden outline tree.

   * Niels Giesen had the idea to automatically archive DONE trees.

   * Bastien Guerry wrote the LaTeX exporter and `org-bibtex.el', and
     has been prolific with patches, ideas, and bug reports.

   * Kai Grossjohann pointed out key-binding conflicts with other
     packages.

   * Bernt Hansen has driven much of the support for auto-repeating
     tasks, task state change logging, and the clocktable.  His clear
     explanations have been critical when we started to adopt the GIT
     version control system.

   * Manuel Hermenegildo has contributed various ideas, small fixed and
     patches.

   * Phil Jackson wrote `org-irc.el'.

   * Scott Jaderholm proposed footnotes, control over whitespace between
     folded entries, and column view for properties.

   * Tokuya Kameshima wrote `org-wl.el' and `org-mew.el'.

   * Shidai Liu ("Leo") asked for embedded LaTeX and tested it.  He also
     provided frequent feedback and some patches.

   * Matt Lundin has proposed last-row references for table formulas
     and named invisible anchors.  He has also worked a lot on the FAQ.

   * Jason F. McBrayer suggested agenda export to CSV format.

   * Max Mikhanosha came up with the idea of refiling.

   * Dmitri Minaev sent a patch to set priority limits on a per-file
     basis.

   * Stefan Monnier provided a patch to keep the Emacs-Lisp compiler
     happy.

   * Rick Moynihan proposed to allow multiple TODO sequences in a file
     and to be able to quickly restrict the agenda to a subtree.

   * Todd Neal provided patches for links to Info files and elisp forms.

   * Tim O'Callaghan suggested in-file links, search options for general
     file links, and TAGS.

   * Takeshi Okano translated the manual and David O'Toole's tutorial
     into Japanese.

   * Oliver Oppitz suggested multi-state TODO items.

   * Scott Otterson sparked the introduction of descriptive text for
     links, among other things.

   * Pete Phillips helped during the development of the TAGS feature,
     and provided frequent feedback.

   * T.V. Raman reported bugs and suggested improvements.

   * Matthias Rempe (Oelde) provided ideas, Windows support, and quality
     control.

   * Paul Rivier provided the basic implementation of named footnotes.

   * Kevin Rogers contributed code to access VM files on remote hosts.

   * Sebastian Rose wrote `org-info.js', a Java script for displaying
     webpages derived from Org using an Info-like, or a folding
     interface with single key navigation.

   * Frank Ruell solved the mystery of the `keymapp nil' bug, a
     conflict with `allout.el'.

   * Jason Riedy generalized the send-receive mechanism for orgtbl
     tables with extensive patches.

   * Philip Rooke created the Org reference card, provided lots of
     feedback, developed and applied standards to the Org documentation.

   * Christian Schlauer proposed angular brackets around links, among
     other things.

   * Eric Schulte wrote `org-plot.el'.

   * Linking to VM/BBDB/Gnus was first inspired by Tom Shannon's
     `organizer-mode.el'.

   * Ilya Shlyakhter proposed the Archive Sibling, line numbering in
     literal examples, and remote highlighting for referenced code
     lines.

   * Stathis Sideris wrote the `ditaa.jar' ASCII to PNG converter that
     is now packaged into Org's `contrib' directory.

   * Daniel Sinder came up with the idea of internal archiving by
     locking subtrees.

   * Dale Smith proposed link abbreviations.

   * James TD Smith has contributed a large number of patches for useful
     tweaks and features.

   * Adam Spiers asked for global linking commands, inspired the link
     extension system, added support for mairix, and proposed the
     mapping API.

   * Andy Stewart contributed code to `org-w3m.el', to copy HTML content
     with links transformation to Org syntax.

   * David O'Toole wrote `org-publish.el' and drafted the manual
     chapter about publishing.

   * Ju"rgen Vollmer contributed code generating the table of contents
     in HTML output.

   * Chris Wallace provided a patch implementing the `QUOTE' keyword.

   * David Wainberg suggested archiving, and improvements to the linking
     system.

   * John Wiegley wrote `emacs-wiki.el', `planner.el', and `muse.el',
     which have some overlap with Org.  Initially the development of
     Org was fully independent because I was not aware of the existence
     of these packages.  But with time I have occasionally looked at
     John's code and learned a lot from it.  John has also contributed
     a number of great ideas and patches directly to Org, including the
     attachment system (`org-attach.el'), integration with Apple Mail
     (`org-mac-message.el'), and hierarchical dependencies of TODO
     items.

   * Carsten Wimmer suggested some changes and helped fix a bug in
     linking to Gnus.

   * Roland Winkler requested additional key bindings to make Org work
     on a tty.

   * Piotr Zielinski wrote `org-mouse.el', proposed agenda blocks and
     contributed various ideas and code snippets.


File: org,  Node: Main Index,  Next: Key Index,  Prev: History and Acknowledgments,  Up: Top

The Main Index
**************

 [index ]
* Menu:

* #+AUTHOR::                             Export options.      (line  16)
* #+BEGIN: clocktable:                   Clocking work time.  (line  62)
* #+BEGIN: columnview:                   Capturing column view.
                                                              (line  11)
* #+BEGIN_EXAMPLE:                       Literal examples.    (line   8)
* #+BEGIN_HTML:                          Quoting HTML tags.   (line  14)
* #+BEGIN_LaTeX:                         Quoting LaTeX code.  (line  14)
* #+BEGIN_SRC:                           Literal examples.    (line  25)
* #+DATE::                               Export options.      (line  16)
* #+EMAIL::                              Export options.      (line  16)
* #+EXPORT_EXCLUDE_TAGS::                Export options.      (line  16)
* #+EXPORT_SELECT_TAGS::                 Export options.      (line  16)
* #+INCLUDE:                             Include files.       (line   7)
* #+LANGUAGE::                           Export options.      (line  16)
* #+LINK_HOME::                          Export options.      (line  16)
* #+LINK_UP::                            Export options.      (line  16)
* #+OPTIONS::                            Export options.      (line  16)
* #+ORGTBL: SEND:                        A LaTeX example.     (line  14)
* #+TEXT:                                Initial text.        (line   6)
* #+TEXT::                               Export options.      (line  16)
* #+TITLE::                              Export options.      (line  16)
* abbreviation, links:                   Link abbreviations.  (line   6)
* acknowledgments:                       History and Acknowledgments.
                                                              (line   6)
* action, for publishing:                Publishing action.   (line   6)
* activation:                            Activation.          (line   6)
* active region <1>:                     LaTeX/PDF export commands.
                                                              (line   6)
* active region <2>:                     HTML Export commands.
                                                              (line   6)
* active region <3>:                     ASCII export.        (line   9)
* active region <4>:                     Built-in table editor.
                                                              (line 150)
* active region:                         Structure editing.   (line 108)
* agenda:                                Weekly/daily agenda. (line   6)
* agenda dispatcher:                     Agenda dispatcher.   (line   6)
* agenda files:                          Agenda files.        (line   6)
* agenda files, removing buffers:        Agenda commands.     (line 357)
* agenda views:                          Agenda Views.        (line   6)
* agenda views, custom:                  Custom agenda views. (line   6)
* agenda views, exporting <1>:           Exporting Agenda Views.
                                                              (line   6)
* agenda views, exporting:               Agenda commands.     (line 346)
* agenda views, user-defined:            Special agenda views.
                                                              (line   6)
* agenda, column view:                   Agenda column view.  (line   6)
* agenda, pipe:                          Using the agenda elsewhere.
                                                              (line   6)
* agenda, with block views:              Block agenda.        (line   6)
* align, STARTUP keyword:                In-buffer settings.  (line  85)
* angular brackets, around links:        External links.      (line  51)
* API, for mapping:                      Using the mapping API.
                                                              (line   6)
* API, for properties <1>:               Using the property API.
                                                              (line   6)
* API, for properties:                   Property API.        (line   6)
* appointment reminders:                 Weekly/daily agenda. (line  64)
* appt.el:                               Weekly/daily agenda. (line  64)
* archive locations:                     Moving subtrees.     (line  32)
* archiving:                             Archiving.           (line   6)
* ASCII export:                          ASCII export.        (line   6)
* attachments:                           Attachments.         (line   6)
* author:                                Feedback.            (line   6)
* author info, in export:                Export options.      (line  30)
* autoload:                              Activation.          (line   6)
* backtrace of an error:                 Feedback.            (line  29)
* BBDB links:                            External links.      (line   6)
* block agenda:                          Block agenda.        (line   6)
* bold text, markup rules:               Emphasis and monospace.
                                                              (line   6)
* Boolean logic, for tag searches:       Tag searches.        (line  24)
* bug reports:                           Feedback.            (line   6)
* bugs:                                  Bugs.                (line   6)
* C-c C-c, overview:                     The very busy C-c C-c key.
                                                              (line   6)
* calc package:                          The spreadsheet.     (line   6)
* calc.el:                               Cooperation.         (line   6)
* calculations, in tables <1>:           The spreadsheet.     (line   6)
* calculations, in tables:               Built-in table editor.
                                                              (line 150)
* calendar commands, from agenda:        Agenda commands.     (line 308)
* calendar integration:                  Weekly/daily agenda. (line  23)
* calendar, for selecting date:          The date/time prompt.
                                                              (line  58)
* capture:                               Capture.             (line   6)
* category:                              Categories.          (line   6)
* category, require for tags/property match: Tag searches.    (line  83)
* CDLaTeX:                               CDLaTeX mode.        (line   6)
* cdlatex.el:                            Cooperation.         (line  29)
* checkbox statistics:                   Checkboxes.          (line  30)
* checkboxes:                            Checkboxes.          (line   6)
* checkboxes and TODO dependencies:      TODO dependencies.   (line  40)
* children, subtree visibility state:    Visibility cycling.  (line  10)
* clean outline view:                    Clean view.          (line   6)
* code line refenences, markup rules:    Literal examples.    (line   6)
* code text, markup rules:               Emphasis and monospace.
                                                              (line   6)
* column formula:                        Column formulas.     (line   6)
* column view, for properties:           Defining columns.    (line   6)
* column view, in agenda:                Agenda column view.  (line   6)
* commands, in agenda buffer:            Agenda commands.     (line   6)
* comment lines:                         Comment lines.       (line   6)
* completion, of dictionary words:       Completion.          (line   6)
* completion, of file names:             Handling links.      (line  55)
* completion, of link abbreviations:     Completion.          (line   6)
* completion, of links:                  Handling links.      (line  36)
* completion, of option keywords <1>:    Completion.          (line   6)
* completion, of option keywords <2>:    Export options.      (line   6)
* completion, of option keywords:        Per-file keywords.   (line  23)
* completion, of property keys:          Completion.          (line   6)
* completion, of tags <1>:               Completion.          (line   6)
* completion, of tags:                   Setting tags.        (line  11)
* completion, of TeX symbols:            Completion.          (line   6)
* completion, of TODO keywords <1>:      Completion.          (line   6)
* completion, of TODO keywords:          Workflow states.     (line  15)
* constants, in calculations:            References.          (line  86)
* constants.el:                          Cooperation.         (line  14)
* constcgs, STARTUP keyword:             In-buffer settings.  (line 114)
* constSI, STARTUP keyword:              In-buffer settings.  (line 114)
* content, STARTUP keyword:              In-buffer settings.  (line  78)
* contents, global visibility state:     Visibility cycling.  (line  22)
* copying, of subtrees:                  Structure editing.   (line   6)
* creating timestamps:                   Creating timestamps. (line   6)
* CSS, for HTML export:                  CSS support.         (line   6)
* CUA.el:                                Conflicts.           (line  18)
* custom agenda views:                   Custom agenda views. (line   6)
* custom date/time format:               Custom time format.  (line   6)
* custom search strings:                 Custom searches.     (line   6)
* customization:                         Customization.       (line   6)
* customtime, STARTUP keyword:           In-buffer settings.  (line 111)
* cutting, of subtrees:                  Structure editing.   (line   6)
* cycling, of TODO states:               TODO basics.         (line  13)
* cycling, visibility:                   Visibility cycling.  (line   6)
* daily agenda:                          Weekly/daily agenda. (line   6)
* date format, custom:                   Custom time format.  (line   6)
* date range:                            Timestamps.          (line  40)
* date stamps <1>:                       Timestamps.          (line   6)
* date stamps:                           Dates and Times.     (line   6)
* date, reading in minibuffer:           The date/time prompt.
                                                              (line   6)
* dates:                                 Dates and Times.     (line   6)
* DEADLINE keyword:                      Deadlines and scheduling.
                                                              (line   9)
* deadlines:                             Timestamps.          (line   6)
* debugging, of table formulas:          Editing and debugging formulas.
                                                              (line  96)
* demotion, of subtrees:                 Structure editing.   (line   6)
* dependencies, of TODO states:          TODO dependencies.   (line   6)
* diary entries, creating from agenda:   Agenda commands.     (line 313)
* diary integration:                     Weekly/daily agenda. (line  23)
* dictionary word completion:            Completion.          (line   6)
* directories, for publishing:           Sources and destinations.
                                                              (line   6)
* dispatcher, for export commands:       The export dispatcher.
                                                              (line   6)
* dispatching agenda commands:           Agenda dispatcher.   (line   6)
* display changing, in agenda:           Agenda commands.     (line  86)
* document structure:                    Document Structure.  (line   6)
* document title, markup rules:          Document title.      (line   6)
* DONE, final TODO keyword:              Per-file keywords.   (line  26)
* drawer, for properties:                Property syntax.     (line   6)
* drawers:                               Drawers.             (line   6)
* dynamic blocks:                        Dynamic blocks.      (line   6)
* dynamic indentation:                   Clean view.          (line   6)
* editing tables:                        Tables.              (line   6)
* editing, of table formulas:            Editing and debugging formulas.
                                                              (line   6)
* effort estimates:                      Effort estimates.    (line   6)
* effort filtering, in agenda:           Agenda commands.     (line 147)
* elisp links:                           External links.      (line   6)
* emphasized text:                       Export options.      (line  30)
* evaluate time range:                   Creating timestamps. (line  50)
* even, STARTUP keyword:                 In-buffer settings.  (line 102)
* export, selective by tags:             Selective export.    (line   6)
* exporting:                             Exporting.           (line   6)
* exporting agenda views <1>:            Exporting Agenda Views.
                                                              (line  13)
* exporting agenda views:                Agenda commands.     (line 346)
* exporting, not:                        Comment lines.       (line   6)
* extended TODO keywords:                TODO extensions.     (line   6)
* external archiving:                    Moving subtrees.     (line   6)
* external links:                        External links.      (line   6)
* external links, in HTML export:        Links.               (line   6)
* faces, for TODO keywords:              Faces for TODO keywords.
                                                              (line   6)
* FAQ:                                   Summary.             (line  54)
* feedback:                              Feedback.            (line   6)
* field formula:                         Field formulas.      (line   6)
* field references:                      References.          (line  15)
* file links:                            External links.      (line   6)
* file links, searching:                 Search options.      (line   6)
* file name completion:                  Handling links.      (line  55)
* files for agenda:                      Agenda files.        (line   6)
* files, adding to agenda list:          Agenda files.        (line  15)
* files, selecting for publishing:       Selecting files.     (line   6)
* filtering, by tag and effort, in agenda: Agenda commands.   (line 147)
* fixed-width sections:                  Export options.      (line  30)
* fnauto, STARTUP keyword:               In-buffer settings.  (line 119)
* fnconfirm, STARTUP keyword:            In-buffer settings.  (line 119)
* fninline, STARTUP keyword:             In-buffer settings.  (line 119)
* fnlocal, STARTUP keyword:              In-buffer settings.  (line 119)
* fnnoinline, STARTUP keyword:           In-buffer settings.  (line 119)
* fnplain, STARTUP keyword:              In-buffer settings.  (line 119)
* fnprompt, STARTUP keyword:             In-buffer settings.  (line 119)
* folded, subtree visibility state:      Visibility cycling.  (line  10)
* folding, sparse trees:                 Sparse trees.        (line   6)
* following links:                       Handling links.      (line  70)
* footnote.el <1>:                       Cooperation.         (line  72)
* footnote.el:                           Footnote markup.     (line   6)
* footnotes <1>:                         Export options.      (line  30)
* footnotes:                             Footnotes.           (line   6)
* footnotes, markup rules:               Footnote markup.     (line   6)
* format specifier:                      Formula syntax for Calc.
                                                              (line  14)
* format, of links:                      Link format.         (line   6)
* formatting source code, markup rules:  Literal examples.    (line  21)
* formula debugging:                     Editing and debugging formulas.
                                                              (line  96)
* formula editing:                       Editing and debugging formulas.
                                                              (line   6)
* formula syntax, Calc:                  Formula syntax for Calc.
                                                              (line   6)
* formula, for individual table field:   Field formulas.      (line   6)
* formula, for table column:             Column formulas.     (line   6)
* formula, in tables:                    Built-in table editor.
                                                              (line 150)
* global cycling:                        Visibility cycling.  (line  22)
* global key bindings:                   Activation.          (line   6)
* global TODO list:                      Global TODO list.    (line   6)
* global visibility states:              Visibility cycling.  (line  22)
* Gnus links:                            External links.      (line   6)
* graph, in tables:                      Org Plot.            (line   6)
* grouping columns in tables:            Column groups.       (line   6)
* headings and sections, markup rules:   Headings and sections.
                                                              (line   6)
* headline levels:                       Export options.      (line  30)
* headline levels, for exporting <1>:    LaTeX/PDF export commands.
                                                              (line  39)
* headline levels, for exporting <2>:    HTML Export commands.
                                                              (line  45)
* headline levels, for exporting:        ASCII export.        (line  21)
* headline navigation:                   Motion.              (line   6)
* headline tagging:                      Tags.                (line   6)
* headline, promotion and demotion:      Structure editing.   (line   6)
* headlines:                             Headlines.           (line   6)
* hide text:                             Visibility cycling.  (line   6)
* hidestars, STARTUP keyword:            In-buffer settings.  (line 102)
* hiding leading stars:                  Clean view.          (line   6)
* history:                               History and Acknowledgments.
                                                              (line   6)
* horizontal rules, markup rules:        Horizontal rules.    (line   6)
* HTML entities:                         TeX macros and LaTeX fragments.
                                                              (line   6)
* HTML export:                           HTML export.         (line   6)
* HTML export, CSS:                      CSS support.         (line   6)
* HTML, and Orgtbl mode:                 Translator functions.
                                                              (line   6)
* hyperlinks:                            Hyperlinks.          (line   6)
* hyperlinks, adding new types:          Adding hyperlink types.
                                                              (line   6)
* iCalendar export:                      iCalendar export.    (line   6)
* images, inline in HTML:                Images in HTML export.
                                                              (line   6)
* images, inline in LaTeX:               Images in LaTeX export.
                                                              (line   6)
* imenu.el:                              Cooperation.         (line  33)
* in-buffer settings:                    In-buffer settings.  (line   6)
* inactive timestamp:                    Timestamps.          (line  49)
* include files, markup rules:           Include files.       (line   6)
* index, of published pages:             Project page index.  (line   6)
* Info links:                            External links.      (line   6)
* inheritance, of properties:            Property inheritance.
                                                              (line   6)
* inheritance, of tags:                  Tag inheritance.     (line   6)
* inlined images, markup rules:          Inlined images.      (line   6)
* inlining images in HTML:               Images in HTML export.
                                                              (line   6)
* inlining images in LaTeX:              Images in LaTeX export.
                                                              (line   6)
* inserting links:                       Handling links.      (line  36)
* installation:                          Installation.        (line   6)
* internal archiving:                    ARCHIVE tag.         (line   6)
* internal links:                        Internal links.      (line   6)
* internal links, in HTML export:        Links.               (line   6)
* introduction:                          Introduction.        (line   6)
* IRC links:                             External links.      (line   6)
* italic text, markup rules:             Emphasis and monospace.
                                                              (line   6)
* jumping, to headlines:                 Motion.              (line   6)
* key bindings, global:                  Activation.          (line   6)
* keyword options:                       Per-file keywords.   (line   6)
* keyword search:                        Keyword search.      (line   6)
* LaTeX class:                           Sectioning structure.
                                                              (line   6)
* LaTeX entities:                        TeX macros and LaTeX fragments.
                                                              (line   6)
* LaTeX export:                          LaTeX and PDF export.
                                                              (line   6)
* LaTeX fragments <1>:                   Export options.      (line  30)
* LaTeX fragments:                       LaTeX fragments.     (line   6)
* LaTeX fragments, markup rules:         TeX macros and LaTeX fragments.
                                                              (line   6)
* LaTeX fragments, preview:              Processing LaTeX fragments.
                                                              (line   6)
* LaTeX interpretation:                  Embedded LaTeX.      (line   6)
* LaTeX sectioning structure:            Sectioning structure.
                                                              (line   6)
* LaTeX, and Orgtbl mode:                A LaTeX example.     (line   6)
* level, require for tags/property match: Tag searches.       (line  83)
* line-break preservation:               Export options.      (line  30)
* link abbreviations:                    Link abbreviations.  (line   6)
* link abbreviations, completion of:     Completion.          (line   6)
* link completion:                       Handling links.      (line  36)
* link format:                           Link format.         (line   6)
* links, external:                       External links.      (line   6)
* links, finding next/previous:          Handling links.      (line 104)
* links, handling:                       Handling links.      (line   6)
* links, in HTML export:                 Links.               (line   6)
* links, internal:                       Internal links.      (line   6)
* links, publishing:                     Publishing links.    (line   6)
* links, radio targets:                  Radio targets.       (line   6)
* links, returning to:                   Handling links.      (line  98)
* Lisp forms, as table formulas:         Formula syntax for Lisp.
                                                              (line   6)
* lists, in other modes:                 Tables in arbitrary syntax.
                                                              (line   6)
* lists, markup rules:                   Lists.               (line   6)
* lists, ordered:                        Plain lists.         (line   6)
* lists, plain:                          Plain lists.         (line   6)
* literal examples, markup rules:        Literal examples.    (line   6)
* logdone, STARTUP keyword:              In-buffer settings.  (line  90)
* logging, of progress:                  Progress logging.    (line   6)
* lognoteclock-out, STARTUP keyword:     In-buffer settings.  (line  90)
* lognotedone, STARTUP keyword:          In-buffer settings.  (line  90)
* lognoterepeat, STARTUP keyword:        In-buffer settings.  (line  90)
* logrepeat, STARTUP keyword:            In-buffer settings.  (line  90)
* maintainer:                            Feedback.            (line   6)
* mapping entries, API:                  Using the mapping API.
                                                              (line   6)
* mark ring:                             Handling links.      (line  94)
* marking characters, tables:            Advanced features.   (line  38)
* match view:                            Matching tags and properties.
                                                              (line   6)
* matching, of properties:               Matching tags and properties.
                                                              (line   6)
* matching, of tags:                     Matching tags and properties.
                                                              (line   6)
* matching, tags:                        Tags.                (line   6)
* math symbols:                          Math symbols.        (line   6)
* MH-E links:                            External links.      (line   6)
* minor mode for structure editing:      Orgstruct mode.      (line   6)
* minor mode for tables:                 Orgtbl mode.         (line   6)
* mode, for calc:                        Formula syntax for Calc.
                                                              (line  14)
* motion commands in agenda:             Agenda commands.     (line  19)
* motion, between headlines:             Motion.              (line   6)
* name, of column or field:              References.          (line  86)
* named references:                      References.          (line  86)
* names as TODO keywords:                TODO types.          (line   6)
* narrow columns in tables:              Narrow columns.      (line   6)
* noalign, STARTUP keyword:              In-buffer settings.  (line  85)
* nologdone, STARTUP keyword:            In-buffer settings.  (line  90)
* nolognoteclock-out, STARTUP keyword:   In-buffer settings.  (line  90)
* nologrepeat, STARTUP keyword:          In-buffer settings.  (line  90)
* occur, command:                        Sparse trees.        (line   6)
* odd, STARTUP keyword:                  In-buffer settings.  (line 102)
* odd-levels-only outlines:              Clean view.          (line   6)
* option keyword completion:             Completion.          (line   6)
* options, for custom agenda views:      Setting Options.     (line   6)
* options, for customization:            Customization.       (line   6)
* options, for export:                   Export options.      (line   6)
* options, for publishing:               Publishing options.  (line   6)
* ordered lists:                         Plain lists.         (line   6)
* Org mode, turning on:                  Activation.          (line  23)
* org-agenda, command:                   Weekly/daily agenda. (line   9)
* org-list-insert-radio-list:            Radio lists.         (line   6)
* org-publish-project-alist:             Project alist.       (line   6)
* Orgstruct mode:                        Orgstruct mode.      (line   6)
* Orgtbl mode <1>:                       Tables in arbitrary syntax.
                                                              (line   6)
* Orgtbl mode:                           Orgtbl mode.         (line   6)
* Outline mode:                          Outlines.            (line   6)
* outline tree:                          Headlines.           (line   6)
* outlines:                              Outlines.            (line   6)
* overview, global visibility state:     Visibility cycling.  (line  22)
* overview, STARTUP keyword:             In-buffer settings.  (line  78)
* packages, interaction with other:      Interaction.         (line   6)
* paragraphs, markup rules:              Paragraphs.          (line   6)
* pasting, of subtrees:                  Structure editing.   (line   6)
* PDF export:                            LaTeX and PDF export.
                                                              (line   6)
* per-file keywords:                     Per-file keywords.   (line   6)
* plain lists:                           Plain lists.         (line   6)
* plain text external links:             External links.      (line  51)
* plot tables using gnuplot:             Org Plot.            (line   6)
* presentation, of agenda items:         Presentation and sorting.
                                                              (line   6)
* printing sparse trees:                 Sparse trees.        (line  47)
* priorities:                            Priorities.          (line   6)
* priorities, of agenda items:           Sorting of agenda items.
                                                              (line   6)
* progress logging:                      Progress logging.    (line   6)
* projects, for publishing:              Project alist.       (line   6)
* promotion, of subtrees:                Structure editing.   (line   6)
* properties:                            Properties and Columns.
                                                              (line   6)
* properties, API <1>:                   Using the property API.
                                                              (line   6)
* properties, API:                       Property API.        (line   6)
* properties, column view:               Defining columns.    (line   6)
* properties, inheritance:               Property inheritance.
                                                              (line   6)
* properties, searching:                 Property searches.   (line   6)
* properties, special:                   Special properties.  (line   6)
* property syntax:                       Property syntax.     (line   6)
* publishing:                            Publishing.          (line   6)
* query editing, in agenda:              Agenda commands.     (line 147)
* quoted HTML tags:                      Export options.      (line  30)
* radio lists:                           Radio lists.         (line   6)
* radio tables:                          Radio tables.        (line   6)
* radio targets:                         Radio targets.       (line   6)
* range references:                      References.          (line  64)
* ranges, time:                          Timestamps.          (line   6)
* recomputing table fields:              Updating the table.  (line   6)
* references:                            References.          (line   6)
* references, named:                     References.          (line  86)
* references, remote:                    References.          (line 107)
* references, to a different table:      References.          (line 107)
* references, to fields:                 References.          (line  15)
* references, to ranges:                 References.          (line  64)
* refiling notes:                        Refiling notes.      (line   6)
* region, active <1>:                    LaTeX/PDF export commands.
                                                              (line   6)
* region, active <2>:                    HTML Export commands.
                                                              (line   6)
* region, active <3>:                    ASCII export.        (line   9)
* region, active <4>:                    Built-in table editor.
                                                              (line 150)
* region, active:                        Structure editing.   (line 108)
* regular expressions, with tags search: Tag searches.        (line  76)
* relative timer:                        Relative timer.      (line   6)
* remember.el <1>:                       Cooperation.         (line  42)
* remember.el:                           Remember.            (line   6)
* remote editing, from agenda:           Agenda commands.     (line 198)
* remote editing, undo:                  Agenda commands.     (line 199)
* remote references:                     References.          (line 107)
* RMAIL links:                           External links.      (line   6)
* SCHEDULED keyword:                     Deadlines and scheduling.
                                                              (line  27)
* scheduling:                            Timestamps.          (line   6)
* Scripts, for agenda processing:        Using the agenda elsewhere.
                                                              (line   6)
* search option in file links:           Search options.      (line   6)
* search strings, custom:                Custom searches.     (line   6)
* searching for tags:                    Tag searches.        (line   6)
* searching, for keywords:               Keyword search.      (line   6)
* searching, of properties:              Property searches.   (line   6)
* section-numbers:                       Export options.      (line  30)
* setting tags:                          Setting tags.        (line   6)
* SHELL links:                           External links.      (line   6)
* shift-selection-mode <1>:              Conflicts.           (line   6)
* shift-selection-mode:                  Plain lists.         (line  78)
* show all, command:                     Visibility cycling.  (line  33)
* show all, global visibility state:     Visibility cycling.  (line  22)
* show hidden text:                      Visibility cycling.  (line   6)
* showall, STARTUP keyword:              In-buffer settings.  (line  78)
* showstars, STARTUP keyword:            In-buffer settings.  (line 102)
* sorting, of agenda items:              Sorting of agenda items.
                                                              (line   6)
* sparse tree, for deadlines:            Inserting deadline/schedule.
                                                              (line  13)
* sparse tree, for TODO:                 TODO basics.         (line  33)
* sparse tree, tag based:                Tags.                (line   6)
* sparse trees:                          Sparse trees.        (line   6)
* special keywords:                      In-buffer settings.  (line   6)
* special strings:                       Export options.      (line  30)
* speedbar.el:                           Cooperation.         (line  46)
* spreadsheet capabilities:              The spreadsheet.     (line   6)
* statistics, for checkboxes:            Checkboxes.          (line  30)
* storing links:                         Handling links.      (line   9)
* strike-through text, markup rules:     Emphasis and monospace.
                                                              (line   6)
* structure editing:                     Structure editing.   (line   6)
* structure of document:                 Document Structure.  (line   6)
* sublevels, inclusion into tags match:  Tag inheritance.     (line   6)
* sublevels, inclusion into TODO list:   Global TODO list.    (line  34)
* subscript:                             Subscripts and superscripts.
                                                              (line   6)
* subtree cycling:                       Visibility cycling.  (line  10)
* subtree visibility states:             Visibility cycling.  (line  10)
* subtree, cut and paste:                Structure editing.   (line   6)
* subtree, subtree visibility state:     Visibility cycling.  (line  10)
* subtrees, cut and paste:               Structure editing.   (line   6)
* summary:                               Summary.             (line   6)
* superscript:                           Subscripts and superscripts.
                                                              (line   6)
* syntax, of formulas:                   Formula syntax for Calc.
                                                              (line   6)
* table editor, built-in:                Built-in table editor.
                                                              (line   6)
* table editor, table.el:                Cooperation.         (line  53)
* table of contents:                     Export options.      (line  30)
* table of contents, markup rules:       Table of contents.   (line   6)
* table.el:                              Cooperation.         (line  50)
* tables <1>:                            Export options.      (line  30)
* tables:                                Tables.              (line   6)
* tables, in LaTeX export:               Tables in LaTeX export.
                                                              (line   6)
* tables, in other modes:                Tables in arbitrary syntax.
                                                              (line   6)
* tables, markup rules:                  Tables exported.     (line   6)
* tag completion:                        Completion.          (line   6)
* tag filtering, in agenda:              Agenda commands.     (line 147)
* tag inheritance:                       Tag inheritance.     (line   6)
* tag searches:                          Tag searches.        (line   6)
* tags:                                  Tags.                (line   6)
* tags view:                             Matching tags and properties.
                                                              (line   6)
* tags, setting:                         Setting tags.        (line   6)
* targets, for links:                    Internal links.      (line   6)
* targets, radio:                        Radio targets.       (line   6)
* tasks, breaking down:                  Breaking down tasks. (line   6)
* templates, for remember:               Remember templates.  (line   6)
* TeX interpretation:                    Embedded LaTeX.      (line   6)
* TeX macros <1>:                        Export options.      (line  30)
* TeX macros:                            Math symbols.        (line   6)
* TeX macros, markup rules:              TeX macros and LaTeX fragments.
                                                              (line   6)
* TeX symbol completion:                 Completion.          (line   6)
* TeX-like syntax for sub- and superscripts: Export options.  (line  30)
* text areas, in HTML:                   Text areas in HTML export.
                                                              (line   6)
* text before first headline, markup rules: Initial text.     (line   6)
* thanks:                                History and Acknowledgments.
                                                              (line   6)
* time format, custom:                   Custom time format.  (line   6)
* time grid:                             Time-of-day specifications.
                                                              (line  26)
* time info, in export:                  Export options.      (line  30)
* time stamps <1>:                       Timestamps.          (line   6)
* time stamps:                           Dates and Times.     (line   6)
* time, reading in minibuffer:           The date/time prompt.
                                                              (line   6)
* time-of-day specification:             Time-of-day specifications.
                                                              (line   6)
* time-sorted view:                      Timeline.            (line   6)
* timeline, single file:                 Timeline.            (line   6)
* timerange:                             Timestamps.          (line  40)
* times:                                 Dates and Times.     (line   6)
* timestamp:                             Timestamps.          (line  14)
* timestamp, inactive:                   Timestamps.          (line  49)
* timestamp, with repeater interval:     Timestamps.          (line  24)
* timestamps, creating:                  Creating timestamps. (line   6)
* TODO dependencies:                     TODO dependencies.   (line   6)
* TODO items:                            TODO Items.          (line   6)
* TODO keyword matching:                 Global TODO list.    (line  17)
* TODO keyword matching, with tags search: Tag searches.      (line  41)
* TODO keyword sets:                     Multiple sets in one file.
                                                              (line   6)
* TODO keywords completion:              Completion.          (line   6)
* TODO list, global:                     Global TODO list.    (line   6)
* TODO types:                            TODO types.          (line   6)
* TODO workflow:                         Workflow states.     (line   6)
* Transient mark mode <1>:               Built-in table editor.
                                                              (line 150)
* Transient mark mode:                   Structure editing.   (line 108)
* transient-mark-mode <1>:               LaTeX/PDF export commands.
                                                              (line   6)
* transient-mark-mode <2>:               HTML Export commands.
                                                              (line   6)
* transient-mark-mode:                   ASCII export.        (line   9)
* translator function:                   Translator functions.
                                                              (line   6)
* trees, sparse:                         Sparse trees.        (line   6)
* trees, visibility:                     Visibility cycling.  (line   6)
* tty key bindings:                      TTY keys.            (line   6)
* types as TODO keywords:                TODO types.          (line   6)
* underlined text, markup rules:         Emphasis and monospace.
                                                              (line   6)
* undoing remote-editing events:         Agenda commands.     (line 199)
* updating, table:                       Updating the table.  (line   6)
* URL links:                             External links.      (line   6)
* USENET links:                          External links.      (line   6)
* variables, for customization:          Customization.       (line   6)
* vectors, in table calculations:        Formula syntax for Calc.
                                                              (line  11)
* verbatim text, markup rules:           Emphasis and monospace.
                                                              (line   6)
* visibility cycling:                    Visibility cycling.  (line   6)
* visibility cycling, drawers:           Drawers.             (line   6)
* visible text, printing:                Sparse trees.        (line  47)
* VM links:                              External links.      (line   6)
* WANDERLUST links:                      External links.      (line   6)
* weekly agenda:                         Weekly/daily agenda. (line   6)
* windmove.el:                           Conflicts.           (line  39)
* workflow states as TODO keywords:      Workflow states.     (line   6)
* XEmacs:                                Installation.        (line   6)
* XOXO export:                           XOXO export.         (line   6)


File: org,  Node: Key Index,  Prev: Main Index,  Up: Top

Key Index
*********

 [index ]
* Menu:

* $:                                     Agenda commands.     (line 220)
* ':                                     CDLaTeX mode.        (line  42)
* +:                                     Agenda commands.     (line 242)
* ,:                                     Agenda commands.     (line 234)
* -:                                     Agenda commands.     (line 248)
* .:                                     Agenda commands.     (line 130)
* /:                                     Agenda commands.     (line 147)
* ::                                     Agenda commands.     (line 230)
* < <1>:                                 Agenda files.        (line  56)
* < <2>:                                 The date/time prompt.
                                                              (line  64)
* <:                                     Using column view.   (line  67)
* <left>:                                Agenda commands.     (line 127)
* <RET> <1>:                             Agenda commands.     (line  41)
* <RET> <2>:                             The date/time prompt.
                                                              (line  64)
* <RET> <3>:                             Setting tags.        (line  95)
* <RET>:                                 Built-in table editor.
                                                              (line  65)
* <right>:                               Agenda commands.     (line 122)
* <SPC> <1>:                             Agenda commands.     (line  28)
* <SPC>:                                 Setting tags.        (line  92)
* <TAB> <1>:                             CDLaTeX mode.        (line  22)
* <TAB> <2>:                             Agenda commands.     (line  35)
* <TAB> <3>:                             Setting tags.        (line  87)
* <TAB> <4>:                             Editing and debugging formulas.
                                                              (line  56)
* <TAB> <5>:                             Built-in table editor.
                                                              (line  58)
* <TAB> <6>:                             Plain lists.         (line  53)
* <TAB>:                                 Visibility cycling.  (line  10)
* > <1>:                                 Agenda commands.     (line 285)
* > <2>:                                 Agenda files.        (line  60)
* > <3>:                                 The date/time prompt.
                                                              (line  64)
* >:                                     Using column view.   (line  67)
* [:                                     Agenda commands.     (line 186)
* \:                                     Agenda commands.     (line 179)
* ]:                                     Agenda commands.     (line 186)
* ^:                                     CDLaTeX mode.        (line  32)
* _:                                     CDLaTeX mode.        (line  32)
* `:                                     CDLaTeX mode.        (line  38)
* A:                                     Agenda commands.     (line 216)
* a <1>:                                 Agenda commands.     (line 213)
* a:                                     Using column view.   (line  56)
* b:                                     Agenda commands.     (line  51)
* C:                                     Agenda commands.     (line 328)
* c:                                     Agenda commands.     (line 308)
* C-#:                                   Advanced features.   (line   9)
* C-':                                   Agenda files.        (line  22)
* C-,:                                   Agenda files.        (line  22)
* C-<RET>:                               Structure editing.   (line  18)
* C-_:                                   Agenda commands.     (line 199)
* C-c !:                                 Creating timestamps. (line  20)
* C-c #:                                 Checkboxes.          (line  66)
* C-c %:                                 Handling links.      (line  94)
* C-c &:                                 Handling links.      (line  98)
* C-c ' <1>:                             Include files.       (line  22)
* C-c ' <2>:                             Literal examples.    (line  61)
* C-c ':                                 Editing and debugging formulas.
                                                              (line  35)
* C-c * <1>:                             Updating the table.  (line  13)
* C-c *:                                 Structure editing.   (line  97)
* C-c +:                                 Built-in table editor.
                                                              (line 150)
* C-c ,:                                 Priorities.          (line  21)
* C-c - <1>:                             Built-in table editor.
                                                              (line  94)
* C-c -:                                 Plain lists.         (line 103)
* C-c .:                                 Creating timestamps. (line  10)
* C-c /:                                 Sparse trees.        (line  15)
* C-c / d:                               Inserting deadline/schedule.
                                                              (line  13)
* C-c / p:                               Property searches.   (line  51)
* C-c / r:                               Sparse trees.        (line  17)
* C-c / T:                               Tag searches.        (line   9)
* C-c / t:                               TODO basics.         (line  33)
* C-c ;:                                 Comment lines.       (line  11)
* C-c <:                                 Creating timestamps. (line  24)
* C-c <RET>:                             Built-in table editor.
                                                              (line  98)
* C-c = <1>:                             Editing and debugging formulas.
                                                              (line  13)
* C-c =:                                 Column formulas.     (line  25)
* C-c >:                                 Creating timestamps. (line  28)
* C-c ?:                                 Editing and debugging formulas.
                                                              (line  23)
* C-c [:                                 Agenda files.        (line  15)
* C-c \:                                 Tag searches.        (line   9)
* C-c ]:                                 Agenda files.        (line  19)
* C-c ^ <1>:                             Built-in table editor.
                                                              (line 102)
* C-c ^:                                 Structure editing.   (line  79)
* C-c `:                                 Built-in table editor.
                                                              (line 168)
* C-c a !:                               Stuck projects.      (line  14)
* C-c a #:                               Stuck projects.      (line  13)
* C-c a a:                               Weekly/daily agenda. (line   9)
* C-c a C:                               Storing searches.    (line   9)
* C-c a e:                               Exporting Agenda Views.
                                                              (line  63)
* C-c a L:                               Timeline.            (line  10)
* C-c a M:                               Matching tags and properties.
                                                              (line  15)
* C-c a m:                               Matching tags and properties.
                                                              (line  10)
* C-c a M:                               Tag searches.        (line  17)
* C-c a m:                               Tag searches.        (line  13)
* C-c a s:                               Keyword search.      (line   9)
* C-c a T:                               Global TODO list.    (line  14)
* C-c a t <1>:                           Global TODO list.    (line   9)
* C-c a t:                               TODO basics.         (line  44)
* C-c C-a <1>:                           Agenda commands.     (line 252)
* C-c C-a:                               Attachments.         (line  26)
* C-c C-a a:                             Attachments.         (line  31)
* C-c C-a c:                             Attachments.         (line  37)
* C-c C-a D:                             Attachments.         (line  66)
* C-c C-a d:                             Attachments.         (line  63)
* C-c C-a F:                             Attachments.         (line  60)
* C-c C-a f:                             Attachments.         (line  57)
* C-c C-a i:                             Attachments.         (line  75)
* C-c C-a l:                             Attachments.         (line  37)
* C-c C-a m:                             Attachments.         (line  37)
* C-c C-a n:                             Attachments.         (line  41)
* C-c C-a O:                             Attachments.         (line  54)
* C-c C-a o:                             Attachments.         (line  48)
* C-c C-a s:                             Attachments.         (line  70)
* C-c C-a z:                             Attachments.         (line  44)
* C-c C-b:                               Motion.              (line  15)
* C-c C-c <1>:                           Cooperation.         (line  53)
* C-c C-c <2>:                           The very busy C-c C-c key.
                                                              (line   6)
* C-c C-c <3>:                           Processing LaTeX fragments.
                                                              (line  15)
* C-c C-c <4>:                           Clocking work time.  (line 111)
* C-c C-c <5>:                           Capturing column view.
                                                              (line  51)
* C-c C-c <6>:                           Using column view.   (line  49)
* C-c C-c <7>:                           Property syntax.     (line  58)
* C-c C-c <8>:                           Setting tags.        (line  18)
* C-c C-c <9>:                           Checkboxes.          (line  45)
* C-c C-c <10>:                          Editing and debugging formulas.
                                                              (line  45)
* C-c C-c <11>:                          Built-in table editor.
                                                              (line  57)
* C-c C-c <12>:                          Footnotes.           (line  75)
* C-c C-c:                               Plain lists.         (line  96)
* C-c C-d <1>:                           Agenda commands.     (line 258)
* C-c C-d:                               Inserting deadline/schedule.
                                                              (line   9)
* C-c C-e:                               The export dispatcher.
                                                              (line  12)
* C-c C-e a:                             ASCII export.        (line   9)
* C-c C-e b:                             HTML Export commands.
                                                              (line  13)
* C-c C-e c:                             iCalendar export.    (line  37)
* C-c C-e d:                             LaTeX/PDF export commands.
                                                              (line  33)
* C-c C-e H:                             HTML Export commands.
                                                              (line  16)
* C-c C-e h:                             HTML Export commands.
                                                              (line   6)
* C-c C-e I:                             iCalendar export.    (line  33)
* C-c C-e i:                             iCalendar export.    (line  31)
* C-c C-e L:                             LaTeX/PDF export commands.
                                                              (line  13)
* C-c C-e l:                             LaTeX/PDF export commands.
                                                              (line   6)
* C-c C-e p:                             LaTeX/PDF export commands.
                                                              (line  30)
* C-c C-e R:                             HTML Export commands.
                                                              (line  19)
* C-c C-e t:                             Export options.      (line  13)
* C-c C-e v <1>:                         XOXO export.         (line  11)
* C-c C-e v <2>:                         The export dispatcher.
                                                              (line  17)
* C-c C-e v:                             Sparse trees.        (line  47)
* C-c C-e v a:                           ASCII export.        (line  16)
* C-c C-e v b:                           HTML Export commands.
                                                              (line  25)
* C-c C-e v H:                           HTML Export commands.
                                                              (line  25)
* C-c C-e v h:                           HTML Export commands.
                                                              (line  25)
* C-c C-e v L:                           LaTeX/PDF export commands.
                                                              (line  16)
* C-c C-e v l:                           LaTeX/PDF export commands.
                                                              (line  16)
* C-c C-e v R:                           HTML Export commands.
                                                              (line  25)
* C-c C-e x:                             XOXO export.         (line  10)
* C-c C-f:                               Motion.              (line  12)
* C-c C-j:                               Motion.              (line  21)
* C-c C-l:                               Handling links.      (line  36)
* C-c C-n:                               Motion.              (line   8)
* C-c C-o <1>:                           Creating timestamps. (line  33)
* C-c C-o <2>:                           Handling links.      (line  70)
* C-c C-o:                               Footnotes.           (line  80)
* C-c C-p:                               Motion.              (line   9)
* C-c C-q <1>:                           Setting tags.        (line  10)
* C-c C-q:                               Editing and debugging formulas.
                                                              (line  49)
* C-c C-r <1>:                           Editing and debugging formulas.
                                                              (line  52)
* C-c C-r:                               Visibility cycling.  (line  34)
* C-c C-s <1>:                           Agenda commands.     (line 255)
* C-c C-s:                               Inserting deadline/schedule.
                                                              (line  20)
* C-c C-t <1>:                           Clocking work time.  (line  34)
* C-c C-t:                               TODO basics.         (line  13)
* C-c C-u:                               Motion.              (line  18)
* C-c C-v:                               TODO basics.         (line  33)
* C-c C-w <1>:                           Refiling notes.      (line  13)
* C-c C-w:                               Structure editing.   (line  75)
* C-c C-x ,:                             Relative timer.      (line  21)
* C-c C-x -:                             Relative timer.      (line  13)
* C-c C-x .:                             Relative timer.      (line  10)
* C-c C-x 0:                             Relative timer.      (line  30)
* C-c C-x <:                             Agenda files.        (line  42)
* C-c C-x >:                             Agenda files.        (line  49)
* C-c C-x A:                             Moving subtrees.     (line  11)
* C-c C-x a:                             ARCHIVE tag.         (line  30)
* C-c C-x b:                             Visibility cycling.  (line  42)
* C-c C-x C-b:                           Checkboxes.          (line  47)
* C-c C-x C-c <1>:                       Agenda column view.  (line  11)
* C-c C-x C-c <2>:                       Agenda commands.     (line 133)
* C-c C-x C-c:                           Using column view.   (line   9)
* C-c C-x C-d:                           Clocking work time.  (line  47)
* C-c C-x C-i:                           Clocking work time.  (line  12)
* C-c C-x C-j:                           Clocking work time.  (line  42)
* C-c C-x C-k:                           Inserting deadline/schedule.
                                                              (line  26)
* C-c C-x C-l:                           Processing LaTeX fragments.
                                                              (line   9)
* C-c C-x C-n:                           Handling links.      (line 104)
* C-c C-x C-o:                           Clocking work time.  (line  21)
* C-c C-x C-p:                           Handling links.      (line 104)
* C-c C-x C-r:                           Clocking work time.  (line  55)
* C-c C-x C-s:                           Moving subtrees.     (line  17)
* C-c C-x C-t:                           Custom time format.  (line  12)
* C-c C-x C-u <1>:                       Dynamic blocks.      (line  22)
* C-c C-x C-u <2>:                       Clocking work time.  (line 113)
* C-c C-x C-u:                           Capturing column view.
                                                              (line  54)
* C-c C-x C-w <1>:                       Built-in table editor.
                                                              (line 122)
* C-c C-x C-w:                           Structure editing.   (line  49)
* C-c C-x C-x:                           Clocking work time.  (line  38)
* C-c C-x C-y <1>:                       Built-in table editor.
                                                              (line 126)
* C-c C-x C-y:                           Structure editing.   (line  57)
* C-c C-x f:                             Footnotes.           (line  49)
* C-c C-x i:                             Capturing column view.
                                                              (line  49)
* C-c C-x M-w <1>:                       Built-in table editor.
                                                              (line 119)
* C-c C-x M-w:                           Structure editing.   (line  53)
* C-c C-x o:                             TODO dependencies.   (line  29)
* C-c C-x p:                             Property syntax.     (line  49)
* C-c C-y <1>:                           Clocking work time.  (line  29)
* C-c C-y:                               Creating timestamps. (line  50)
* C-c l <1>:                             Literal examples.    (line  68)
* C-c l:                                 Handling links.      (line   9)
* C-c { <1>:                             CDLaTeX mode.        (line  20)
* C-c {:                                 Editing and debugging formulas.
                                                              (line  32)
* C-c |:                                 Built-in table editor.
                                                              (line  41)
* C-c }:                                 Editing and debugging formulas.
                                                              (line  27)
* C-c ~:                                 Cooperation.         (line  64)
* C-k:                                   Agenda commands.     (line 207)
* C-S-<left>:                            Multiple sets in one file.
                                                              (line  25)
* C-S-<RET>:                             Structure editing.   (line  26)
* C-S-<right>:                           Multiple sets in one file.
                                                              (line  25)
* C-TAB:                                 ARCHIVE tag.         (line  40)
* C-u C-c *:                             Updating the table.  (line  16)
* C-u C-c .:                             Creating timestamps. (line  15)
* C-u C-c = <1>:                         Editing and debugging formulas.
                                                              (line  13)
* C-u C-c =:                             Field formulas.      (line  26)
* C-u C-c C-c:                           Updating the table.  (line  19)
* C-u C-c C-l:                           Handling links.      (line  55)
* C-u C-c C-t:                           TODO basics.         (line  22)
* C-u C-c C-w:                           Refiling notes.      (line  26)
* C-u C-c C-x ,:                         Relative timer.      (line  25)
* C-u C-c C-x a:                         ARCHIVE tag.         (line  33)
* C-u C-c C-x C-s:                       Moving subtrees.     (line  23)
* C-u C-c C-x C-u <1>:                   Dynamic blocks.      (line  23)
* C-u C-c C-x C-u <2>:                   Clocking work time.  (line 115)
* C-u C-c C-x C-u:                       Capturing column view.
                                                              (line  56)
* C-u C-u <TAB>:                         Visibility cycling.  (line  62)
* C-u C-u C-c *:                         Updating the table.  (line  22)
* C-u C-u C-c =:                         Editing and debugging formulas.
                                                              (line  17)
* C-u C-u C-c C-c:                       Updating the table.  (line  22)
* C-u C-u C-c C-e:                       The export dispatcher.
                                                              (line  21)
* C-u C-u C-c C-t:                       Multiple sets in one file.
                                                              (line  25)
* C-u C-u C-c C-w:                       Refiling notes.      (line  29)
* C-u C-u C-u <TAB>:                     Visibility cycling.  (line  33)
* C-u C-u C-u C-c C-t:                   TODO dependencies.   (line  30)
* C-x C-s <1>:                           Agenda commands.     (line 118)
* C-x C-s:                               Editing and debugging formulas.
                                                              (line  45)
* C-x C-w <1>:                           Exporting Agenda Views.
                                                              (line  12)
* C-x C-w:                               Agenda commands.     (line 345)
* C-x n s:                               Structure editing.   (line  91)
* C-x n w:                               Structure editing.   (line  94)
* C-y:                                   Structure editing.   (line  63)
* D:                                     Agenda commands.     (line 100)
* d:                                     Agenda commands.     (line  87)
* e:                                     Using column view.   (line  43)
* f:                                     Agenda commands.     (line  44)
* g:                                     Agenda commands.     (line 115)
* G:                                     Agenda commands.     (line 104)
* g:                                     Using column view.   (line  21)
* H:                                     Agenda commands.     (line 332)
* i:                                     Agenda commands.     (line 313)
* I:                                     Agenda commands.     (line 290)
* J:                                     Agenda commands.     (line 302)
* k:                                     Agenda commands.     (line 261)
* k a:                                   Inserting deadline/schedule.
                                                              (line  26)
* k s:                                   Inserting deadline/schedule.
                                                              (line  26)
* l:                                     Agenda commands.     (line  58)
* L:                                     Agenda commands.     (line  32)
* M:                                     Agenda commands.     (line 319)
* m:                                     Agenda commands.     (line  87)
* M-<down> <1>:                          Editing and debugging formulas.
                                                              (line  75)
* M-<down>:                              Built-in table editor.
                                                              (line  83)
* M-<left> <1>:                          Built-in table editor.
                                                              (line  75)
* M-<left>:                              Structure editing.   (line  31)
* M-<RET> <1>:                           Relative timer.      (line  17)
* M-<RET> <2>:                           Built-in table editor.
                                                              (line 133)
* M-<RET> <3>:                           Plain lists.         (line  61)
* M-<RET>:                               Structure editing.   (line   6)
* M-<right> <1>:                         Built-in table editor.
                                                              (line  75)
* M-<right>:                             Structure editing.   (line  34)
* M-<TAB> <1>:                           Completion.          (line  10)
* M-<TAB> <2>:                           Property syntax.     (line  46)
* M-<TAB> <3>:                           Setting tags.        (line   6)
* M-<TAB> <4>:                           Per-file keywords.   (line  23)
* M-<TAB>:                               Editing and debugging formulas.
                                                              (line  63)
* M-<up> <1>:                            Editing and debugging formulas.
                                                              (line  75)
* M-<up>:                                Built-in table editor.
                                                              (line  83)
* M-S-<down> <1>:                        Editing and debugging formulas.
                                                              (line  71)
* M-S-<down> <2>:                        Built-in table editor.
                                                              (line  90)
* M-S-<down> <3>:                        Plain lists.         (line  81)
* M-S-<down>:                            Structure editing.   (line  46)
* M-S-<left> <1>:                        The date/time prompt.
                                                              (line  64)
* M-S-<left> <2>:                        Built-in table editor.
                                                              (line  77)
* M-S-<left> <3>:                        Plain lists.         (line  87)
* M-S-<left>:                            Structure editing.   (line  37)
* M-S-<RET> <1>:                         Checkboxes.          (line  63)
* M-S-<RET> <2>:                         Plain lists.         (line  71)
* M-S-<RET>:                             Structure editing.   (line  23)
* M-S-<right> <1>:                       The date/time prompt.
                                                              (line  64)
* M-S-<right> <2>:                       Built-in table editor.
                                                              (line  80)
* M-S-<right> <3>:                       Plain lists.         (line  87)
* M-S-<right>:                           Structure editing.   (line  40)
* M-S-<up> <1>:                          Editing and debugging formulas.
                                                              (line  71)
* M-S-<up> <2>:                          Built-in table editor.
                                                              (line  87)
* M-S-<up> <3>:                          Plain lists.         (line  81)
* M-S-<up>:                              Structure editing.   (line  43)
* M-x org-iswitchb:                      Agenda files.        (line  26)
* mouse-1 <1>:                           Agenda commands.     (line  35)
* mouse-1 <2>:                           The date/time prompt.
                                                              (line  64)
* mouse-1 <3>:                           Handling links.      (line  85)
* mouse-1:                               Footnotes.           (line  80)
* mouse-2 <1>:                           Agenda commands.     (line  35)
* mouse-2 <2>:                           Handling links.      (line  85)
* mouse-2:                               Footnotes.           (line  80)
* mouse-3 <1>:                           Agenda commands.     (line  28)
* mouse-3:                               Handling links.      (line  90)
* n <1>:                                 Agenda commands.     (line  19)
* n:                                     Using column view.   (line  40)
* O:                                     Agenda commands.     (line 294)
* o:                                     Agenda commands.     (line  86)
* P:                                     Agenda commands.     (line 239)
* p <1>:                                 Agenda commands.     (line  20)
* p:                                     Using column view.   (line  40)
* q <1>:                                 Agenda commands.     (line 356)
* q:                                     Using column view.   (line  24)
* r:                                     Agenda commands.     (line 108)
* R:                                     Agenda commands.     (line  74)
* r <1>:                                 Global TODO list.    (line  22)
* r:                                     Using column view.   (line  17)
* RET:                                   Handling links.      (line  70)
* S:                                     Agenda commands.     (line 323)
* s:                                     Agenda commands.     (line 118)
* S-<down> <1>:                          Agenda commands.     (line 248)
* S-<down> <2>:                          The date/time prompt.
                                                              (line  64)
* S-<down> <3>:                          Creating timestamps. (line  42)
* S-<down> <4>:                          Priorities.          (line  26)
* S-<down> <5>:                          Editing and debugging formulas.
                                                              (line  66)
* S-<down>:                              Plain lists.         (line  74)
* S-<left> <1>:                          Agenda commands.     (line 281)
* S-<left> <2>:                          Clocking work time.  (line 119)
* S-<left> <3>:                          The date/time prompt.
                                                              (line  64)
* S-<left> <4>:                          Creating timestamps. (line  37)
* S-<left> <5>:                          Using column view.   (line  33)
* S-<left> <6>:                          Property syntax.     (line  66)
* S-<left> <7>:                          Multiple sets in one file.
                                                              (line  32)
* S-<left> <8>:                          TODO basics.         (line  28)
* S-<left> <9>:                          Editing and debugging formulas.
                                                              (line  66)
* S-<left>:                              Plain lists.         (line 113)
* S-<RET>:                               Built-in table editor.
                                                              (line 153)
* S-<right> <1>:                         Agenda commands.     (line 273)
* S-<right> <2>:                         Clocking work time.  (line 119)
* S-<right> <3>:                         The date/time prompt.
                                                              (line  64)
* S-<right> <4>:                         Creating timestamps. (line  37)
* S-<right> <5>:                         Using column view.   (line  33)
* S-<right> <6>:                         Property syntax.     (line  66)
* S-<right> <7>:                         Multiple sets in one file.
                                                              (line  32)
* S-<right> <8>:                         TODO basics.         (line  28)
* S-<right> <9>:                         Editing and debugging formulas.
                                                              (line  66)
* S-<right>:                             Plain lists.         (line 113)
* S-<TAB> <1>:                           Built-in table editor.
                                                              (line  62)
* S-<TAB>:                               Visibility cycling.  (line  22)
* S-<up> <1>:                            Agenda commands.     (line 242)
* S-<up> <2>:                            The date/time prompt.
                                                              (line  64)
* S-<up> <3>:                            Creating timestamps. (line  42)
* S-<up> <4>:                            Priorities.          (line  26)
* S-<up> <5>:                            Editing and debugging formulas.
                                                              (line  66)
* S-<up>:                                Plain lists.         (line  74)
* S-M-<left>:                            Using column view.   (line  71)
* S-M-<RET>:                             TODO basics.         (line  51)
* S-M-<right>:                           Using column view.   (line  68)
* T:                                     Agenda commands.     (line 225)
* t:                                     Agenda commands.     (line 203)
* v <1>:                                 Agenda commands.     (line  68)
* v:                                     Using column view.   (line  52)
* w:                                     Agenda commands.     (line  87)
* x:                                     Agenda commands.     (line 357)
* X:                                     Agenda commands.     (line 297)
* y:                                     Agenda commands.     (line  87)
* {:                                     Agenda commands.     (line 186)
* }:                                     Agenda commands.     (line 186)


